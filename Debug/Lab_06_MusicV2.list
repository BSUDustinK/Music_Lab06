
Lab_06_MusicV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800635c  0800635c  0000735c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800636c  0800636c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  0800636c  0800636c  0000736c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006374  08006374  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006374  08006374  00007374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006378  08006378  00007378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800637c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          00001990  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200019f8  200019f8  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ad2  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002708  00000000  00000000  00018b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  0001b278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aed  00000000  00000000  0001c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002209a  00000000  00000000  0001cba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001192a  00000000  00000000  0003ec3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1baa  00000000  00000000  00050569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122113  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c38  00000000  00000000  00122158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00125d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006344 	.word	0x08006344

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08006344 	.word	0x08006344

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f002 faa9 	bl	8002a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f001 fe13 	bl	80020ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f001 feb1 	bl	800222c <MX_GPIO_Init>
  //MX_I2C1_Init();
  //MX_I2S3_Init();
  //MX_SPI1_Init();
  //MX_USB_HOST_Init();
  MX_TIM7_Init();
 80004ca:	f001 fe79 	bl	80021c0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /*** Configure GPIOs ***/
  GPIOD->MODER = 0x55555555; // set all Port D pins to outputs
 80004ce:	4b22      	ldr	r3, [pc, #136]	@ (8000558 <main+0xa0>)
 80004d0:	f04f 3255 	mov.w	r2, #1431655765	@ 0x55555555
 80004d4:	601a      	str	r2, [r3, #0]
  GPIOA->MODER |= 0x000000FF; // Port A mode register - make A0 to A3 analog pins
 80004d6:	4b21      	ldr	r3, [pc, #132]	@ (800055c <main+0xa4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a20      	ldr	r2, [pc, #128]	@ (800055c <main+0xa4>)
 80004dc:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 80004e0:	6013      	str	r3, [r2, #0]
  GPIOE->MODER |= 0x55555555; // Port E mode register - make E8 to E15 outputs
 80004e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000560 <main+0xa8>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000560 <main+0xa8>)
 80004e8:	f043 3355 	orr.w	r3, r3, #1431655765	@ 0x55555555
 80004ec:	6013      	str	r3, [r2, #0]
  GPIOC->MODER |= 0x0; // Port C mode register - all inputs
 80004ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000564 <main+0xac>)
 80004f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000564 <main+0xac>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	6013      	str	r3, [r2, #0]
  GPIOE->ODR = 0xFFFF; // Set all Port E pins high
 80004f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000560 <main+0xa8>)
 80004f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80004fc:	615a      	str	r2, [r3, #20]

  /*** Configure ADC1 ***/
  RCC->APB2ENR |= 1<<8;  // Turn on ADC1 clock by forcing bit 8 to 1 while keeping other bits unchanged
 80004fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000568 <main+0xb0>)
 8000500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000502:	4a19      	ldr	r2, [pc, #100]	@ (8000568 <main+0xb0>)
 8000504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000508:	6453      	str	r3, [r2, #68]	@ 0x44
  ADC1->SMPR2 |= 1; // 15 clock cycles per sample
 800050a:	4b18      	ldr	r3, [pc, #96]	@ (800056c <main+0xb4>)
 800050c:	691b      	ldr	r3, [r3, #16]
 800050e:	4a17      	ldr	r2, [pc, #92]	@ (800056c <main+0xb4>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6113      	str	r3, [r2, #16]
  ADC1->CR2 |= 1;        // Turn on ADC1 by forcing bit 0 to 1 while keeping other bits unchanged
 8000516:	4b15      	ldr	r3, [pc, #84]	@ (800056c <main+0xb4>)
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	4a14      	ldr	r2, [pc, #80]	@ (800056c <main+0xb4>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6093      	str	r3, [r2, #8]
  RCC->AHB1ENR |= 1<<5; // Enable clock for timer 7
  __enable_irq(); // Enable interrupts
  NVIC_EnableIRQ(TIM7_IRQn); // Enable Timer 7 Interrupt in the NVIC controller
  *******************************************************************************************************/

  TIM7->PSC = 199; //250Khz timer clock prescaler value, 250Khz = 50Mhz / 200
 8000522:	4b13      	ldr	r3, [pc, #76]	@ (8000570 <main+0xb8>)
 8000524:	22c7      	movs	r2, #199	@ 0xc7
 8000526:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM7->ARR = 1; // Count to 1 then generate interrupt (divide by 2), 125Khz interrupt rate to increment byte counter for 78Hz PWM
 8000528:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <main+0xb8>)
 800052a:	2201      	movs	r2, #1
 800052c:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM7->DIER |= 1; // Enable timer 7 interrupt
 800052e:	4b10      	ldr	r3, [pc, #64]	@ (8000570 <main+0xb8>)
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	4a0f      	ldr	r2, [pc, #60]	@ (8000570 <main+0xb8>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	60d3      	str	r3, [r2, #12]
  TIM7->CR1 |= 1; // Enable timer counting
 800053a:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <main+0xb8>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a0c      	ldr	r2, [pc, #48]	@ (8000570 <main+0xb8>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */

  /* Jeopardy Song

   */
  int noteCount = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  int introCount;

  int tempoForSong = 1200;
 800054a:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 800054e:	603b      	str	r3, [r7, #0]

  for(introCount=0;introCount<6;introCount++){
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	e357      	b.n	8000c06 <main+0x74e>
 8000556:	bf00      	nop
 8000558:	40020c00 	.word	0x40020c00
 800055c:	40020000 	.word	0x40020000
 8000560:	40021000 	.word	0x40021000
 8000564:	40020800 	.word	0x40020800
 8000568:	40023800 	.word	0x40023800
 800056c:	40012000 	.word	0x40012000
 8000570:	40001400 	.word	0x40001400

    Song[noteCount].note = C4;
 8000574:	49bf      	ldr	r1, [pc, #764]	@ (8000874 <main+0x3bc>)
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	4613      	mov	r3, r2
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	4413      	add	r3, r2
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	440b      	add	r3, r1
 8000582:	22ef      	movs	r2, #239	@ 0xef
 8000584:	601a      	str	r2, [r3, #0]
    Song[noteCount].size = _8th;
 8000586:	49bb      	ldr	r1, [pc, #748]	@ (8000874 <main+0x3bc>)
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	4613      	mov	r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	4413      	add	r3, r2
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	440b      	add	r3, r1
 8000594:	3304      	adds	r3, #4
 8000596:	2208      	movs	r2, #8
 8000598:	601a      	str	r2, [r3, #0]
    Song[noteCount].tempo = tempoForSong;
 800059a:	49b6      	ldr	r1, [pc, #728]	@ (8000874 <main+0x3bc>)
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	4613      	mov	r3, r2
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	4413      	add	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	440b      	add	r3, r1
 80005a8:	3308      	adds	r3, #8
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	601a      	str	r2, [r3, #0]
    Song[noteCount].space = 10;
 80005ae:	49b1      	ldr	r1, [pc, #708]	@ (8000874 <main+0x3bc>)
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	4613      	mov	r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	440b      	add	r3, r1
 80005bc:	330c      	adds	r3, #12
 80005be:	220a      	movs	r2, #10
 80005c0:	601a      	str	r2, [r3, #0]
    Song[noteCount].end = 0;
 80005c2:	49ac      	ldr	r1, [pc, #688]	@ (8000874 <main+0x3bc>)
 80005c4:	68fa      	ldr	r2, [r7, #12]
 80005c6:	4613      	mov	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	440b      	add	r3, r1
 80005d0:	3310      	adds	r3, #16
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
    noteCount++;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	3301      	adds	r3, #1
 80005da:	60fb      	str	r3, [r7, #12]

    Song[noteCount].note = D4;
 80005dc:	49a5      	ldr	r1, [pc, #660]	@ (8000874 <main+0x3bc>)
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	4613      	mov	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	440b      	add	r3, r1
 80005ea:	22d5      	movs	r2, #213	@ 0xd5
 80005ec:	601a      	str	r2, [r3, #0]
    Song[noteCount].size = _8th;
 80005ee:	49a1      	ldr	r1, [pc, #644]	@ (8000874 <main+0x3bc>)
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	4613      	mov	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	440b      	add	r3, r1
 80005fc:	3304      	adds	r3, #4
 80005fe:	2208      	movs	r2, #8
 8000600:	601a      	str	r2, [r3, #0]
    Song[noteCount].tempo = tempoForSong;
 8000602:	499c      	ldr	r1, [pc, #624]	@ (8000874 <main+0x3bc>)
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	4613      	mov	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	4413      	add	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	3308      	adds	r3, #8
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	601a      	str	r2, [r3, #0]
    Song[noteCount].space = 10;
 8000616:	4997      	ldr	r1, [pc, #604]	@ (8000874 <main+0x3bc>)
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	4613      	mov	r3, r2
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	4413      	add	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	440b      	add	r3, r1
 8000624:	330c      	adds	r3, #12
 8000626:	220a      	movs	r2, #10
 8000628:	601a      	str	r2, [r3, #0]
    Song[noteCount].end = 0;
 800062a:	4992      	ldr	r1, [pc, #584]	@ (8000874 <main+0x3bc>)
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	4613      	mov	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	4413      	add	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	440b      	add	r3, r1
 8000638:	3310      	adds	r3, #16
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
    noteCount++;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3301      	adds	r3, #1
 8000642:	60fb      	str	r3, [r7, #12]

    Song[noteCount].note = E4;
 8000644:	498b      	ldr	r1, [pc, #556]	@ (8000874 <main+0x3bc>)
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	4613      	mov	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	440b      	add	r3, r1
 8000652:	22be      	movs	r2, #190	@ 0xbe
 8000654:	601a      	str	r2, [r3, #0]
    Song[noteCount].size = _8th;
 8000656:	4987      	ldr	r1, [pc, #540]	@ (8000874 <main+0x3bc>)
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	4613      	mov	r3, r2
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4413      	add	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	440b      	add	r3, r1
 8000664:	3304      	adds	r3, #4
 8000666:	2208      	movs	r2, #8
 8000668:	601a      	str	r2, [r3, #0]
    Song[noteCount].tempo = tempoForSong;
 800066a:	4982      	ldr	r1, [pc, #520]	@ (8000874 <main+0x3bc>)
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	4613      	mov	r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	4413      	add	r3, r2
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	440b      	add	r3, r1
 8000678:	3308      	adds	r3, #8
 800067a:	683a      	ldr	r2, [r7, #0]
 800067c:	601a      	str	r2, [r3, #0]
    Song[noteCount].space = 10;
 800067e:	497d      	ldr	r1, [pc, #500]	@ (8000874 <main+0x3bc>)
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	4613      	mov	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	4413      	add	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	440b      	add	r3, r1
 800068c:	330c      	adds	r3, #12
 800068e:	220a      	movs	r2, #10
 8000690:	601a      	str	r2, [r3, #0]
    Song[noteCount].end = 0;
 8000692:	4978      	ldr	r1, [pc, #480]	@ (8000874 <main+0x3bc>)
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	4613      	mov	r3, r2
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	4413      	add	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	440b      	add	r3, r1
 80006a0:	3310      	adds	r3, #16
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
    noteCount++;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	3301      	adds	r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]

    Song[noteCount].note = C4;
 80006ac:	4971      	ldr	r1, [pc, #452]	@ (8000874 <main+0x3bc>)
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	4613      	mov	r3, r2
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4413      	add	r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	440b      	add	r3, r1
 80006ba:	22ef      	movs	r2, #239	@ 0xef
 80006bc:	601a      	str	r2, [r3, #0]
    Song[noteCount].size = _8th;
 80006be:	496d      	ldr	r1, [pc, #436]	@ (8000874 <main+0x3bc>)
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	4613      	mov	r3, r2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	4413      	add	r3, r2
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	440b      	add	r3, r1
 80006cc:	3304      	adds	r3, #4
 80006ce:	2208      	movs	r2, #8
 80006d0:	601a      	str	r2, [r3, #0]
    Song[noteCount].tempo = tempoForSong;
 80006d2:	4968      	ldr	r1, [pc, #416]	@ (8000874 <main+0x3bc>)
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	4613      	mov	r3, r2
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4413      	add	r3, r2
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	440b      	add	r3, r1
 80006e0:	3308      	adds	r3, #8
 80006e2:	683a      	ldr	r2, [r7, #0]
 80006e4:	601a      	str	r2, [r3, #0]
    Song[noteCount].space = 10;
 80006e6:	4963      	ldr	r1, [pc, #396]	@ (8000874 <main+0x3bc>)
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	4613      	mov	r3, r2
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	330c      	adds	r3, #12
 80006f6:	220a      	movs	r2, #10
 80006f8:	601a      	str	r2, [r3, #0]
    Song[noteCount].end = 0;
 80006fa:	495e      	ldr	r1, [pc, #376]	@ (8000874 <main+0x3bc>)
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	4613      	mov	r3, r2
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	4413      	add	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	440b      	add	r3, r1
 8000708:	3310      	adds	r3, #16
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
    noteCount++;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3301      	adds	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]

    Song[noteCount].note = D4;
 8000714:	4957      	ldr	r1, [pc, #348]	@ (8000874 <main+0x3bc>)
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	4613      	mov	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	440b      	add	r3, r1
 8000722:	22d5      	movs	r2, #213	@ 0xd5
 8000724:	601a      	str	r2, [r3, #0]
    Song[noteCount].size = _8th;
 8000726:	4953      	ldr	r1, [pc, #332]	@ (8000874 <main+0x3bc>)
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	4613      	mov	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4413      	add	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	440b      	add	r3, r1
 8000734:	3304      	adds	r3, #4
 8000736:	2208      	movs	r2, #8
 8000738:	601a      	str	r2, [r3, #0]
    Song[noteCount].tempo = tempoForSong;
 800073a:	494e      	ldr	r1, [pc, #312]	@ (8000874 <main+0x3bc>)
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	4613      	mov	r3, r2
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	4413      	add	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	440b      	add	r3, r1
 8000748:	3308      	adds	r3, #8
 800074a:	683a      	ldr	r2, [r7, #0]
 800074c:	601a      	str	r2, [r3, #0]
    Song[noteCount].space = 10;
 800074e:	4949      	ldr	r1, [pc, #292]	@ (8000874 <main+0x3bc>)
 8000750:	68fa      	ldr	r2, [r7, #12]
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	440b      	add	r3, r1
 800075c:	330c      	adds	r3, #12
 800075e:	220a      	movs	r2, #10
 8000760:	601a      	str	r2, [r3, #0]
    Song[noteCount].end = 0;
 8000762:	4944      	ldr	r1, [pc, #272]	@ (8000874 <main+0x3bc>)
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	4613      	mov	r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	440b      	add	r3, r1
 8000770:	3310      	adds	r3, #16
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
    noteCount++;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	3301      	adds	r3, #1
 800077a:	60fb      	str	r3, [r7, #12]

    Song[noteCount].note = E4;
 800077c:	493d      	ldr	r1, [pc, #244]	@ (8000874 <main+0x3bc>)
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	4613      	mov	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	440b      	add	r3, r1
 800078a:	22be      	movs	r2, #190	@ 0xbe
 800078c:	601a      	str	r2, [r3, #0]
    Song[noteCount].size = _8th;
 800078e:	4939      	ldr	r1, [pc, #228]	@ (8000874 <main+0x3bc>)
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	4613      	mov	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4413      	add	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	440b      	add	r3, r1
 800079c:	3304      	adds	r3, #4
 800079e:	2208      	movs	r2, #8
 80007a0:	601a      	str	r2, [r3, #0]
    Song[noteCount].tempo = tempoForSong;
 80007a2:	4934      	ldr	r1, [pc, #208]	@ (8000874 <main+0x3bc>)
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	4613      	mov	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	4413      	add	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	440b      	add	r3, r1
 80007b0:	3308      	adds	r3, #8
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	601a      	str	r2, [r3, #0]
    Song[noteCount].space = 10;
 80007b6:	492f      	ldr	r1, [pc, #188]	@ (8000874 <main+0x3bc>)
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	4613      	mov	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	440b      	add	r3, r1
 80007c4:	330c      	adds	r3, #12
 80007c6:	220a      	movs	r2, #10
 80007c8:	601a      	str	r2, [r3, #0]
    Song[noteCount].end = 0;
 80007ca:	492a      	ldr	r1, [pc, #168]	@ (8000874 <main+0x3bc>)
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	4613      	mov	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4413      	add	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	440b      	add	r3, r1
 80007d8:	3310      	adds	r3, #16
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
    noteCount++;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	3301      	adds	r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]

    Song[noteCount].note = F4;
 80007e4:	4923      	ldr	r1, [pc, #140]	@ (8000874 <main+0x3bc>)
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	4613      	mov	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	440b      	add	r3, r1
 80007f2:	22b3      	movs	r2, #179	@ 0xb3
 80007f4:	601a      	str	r2, [r3, #0]
    Song[noteCount].size = _8th;
 80007f6:	491f      	ldr	r1, [pc, #124]	@ (8000874 <main+0x3bc>)
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4613      	mov	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	440b      	add	r3, r1
 8000804:	3304      	adds	r3, #4
 8000806:	2208      	movs	r2, #8
 8000808:	601a      	str	r2, [r3, #0]
    Song[noteCount].tempo = tempoForSong;
 800080a:	491a      	ldr	r1, [pc, #104]	@ (8000874 <main+0x3bc>)
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	4613      	mov	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4413      	add	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	440b      	add	r3, r1
 8000818:	3308      	adds	r3, #8
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	601a      	str	r2, [r3, #0]
    Song[noteCount].space = 10;
 800081e:	4915      	ldr	r1, [pc, #84]	@ (8000874 <main+0x3bc>)
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	4613      	mov	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4413      	add	r3, r2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	440b      	add	r3, r1
 800082c:	330c      	adds	r3, #12
 800082e:	220a      	movs	r2, #10
 8000830:	601a      	str	r2, [r3, #0]
    Song[noteCount].end = 0;
 8000832:	4910      	ldr	r1, [pc, #64]	@ (8000874 <main+0x3bc>)
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	4613      	mov	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4413      	add	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	440b      	add	r3, r1
 8000840:	3310      	adds	r3, #16
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
    noteCount++;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]

    Song[noteCount].note = D4;
 800084c:	4909      	ldr	r1, [pc, #36]	@ (8000874 <main+0x3bc>)
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	4613      	mov	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	440b      	add	r3, r1
 800085a:	22d5      	movs	r2, #213	@ 0xd5
 800085c:	601a      	str	r2, [r3, #0]
    Song[noteCount].size = _8th;
 800085e:	4905      	ldr	r1, [pc, #20]	@ (8000874 <main+0x3bc>)
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	4613      	mov	r3, r2
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	4413      	add	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	440b      	add	r3, r1
 800086c:	3304      	adds	r3, #4
 800086e:	2208      	movs	r2, #8
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	e001      	b.n	8000878 <main+0x3c0>
 8000874:	200000fc 	.word	0x200000fc
    Song[noteCount].tempo = tempoForSong;
 8000878:	49bf      	ldr	r1, [pc, #764]	@ (8000b78 <main+0x6c0>)
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	4613      	mov	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	440b      	add	r3, r1
 8000886:	3308      	adds	r3, #8
 8000888:	683a      	ldr	r2, [r7, #0]
 800088a:	601a      	str	r2, [r3, #0]
    Song[noteCount].space = 10;
 800088c:	49ba      	ldr	r1, [pc, #744]	@ (8000b78 <main+0x6c0>)
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	4613      	mov	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	440b      	add	r3, r1
 800089a:	330c      	adds	r3, #12
 800089c:	220a      	movs	r2, #10
 800089e:	601a      	str	r2, [r3, #0]
    Song[noteCount].end = 0;
 80008a0:	49b5      	ldr	r1, [pc, #724]	@ (8000b78 <main+0x6c0>)
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	4613      	mov	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	440b      	add	r3, r1
 80008ae:	3310      	adds	r3, #16
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
    noteCount++;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	3301      	adds	r3, #1
 80008b8:	60fb      	str	r3, [r7, #12]

    Song[noteCount].note = G4;
 80008ba:	49af      	ldr	r1, [pc, #700]	@ (8000b78 <main+0x6c0>)
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	4613      	mov	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4413      	add	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	440b      	add	r3, r1
 80008c8:	229f      	movs	r2, #159	@ 0x9f
 80008ca:	601a      	str	r2, [r3, #0]
    Song[noteCount].size = _8th;
 80008cc:	49aa      	ldr	r1, [pc, #680]	@ (8000b78 <main+0x6c0>)
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	4613      	mov	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4413      	add	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	440b      	add	r3, r1
 80008da:	3304      	adds	r3, #4
 80008dc:	2208      	movs	r2, #8
 80008de:	601a      	str	r2, [r3, #0]
    Song[noteCount].tempo = tempoForSong;
 80008e0:	49a5      	ldr	r1, [pc, #660]	@ (8000b78 <main+0x6c0>)
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	4613      	mov	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	440b      	add	r3, r1
 80008ee:	3308      	adds	r3, #8
 80008f0:	683a      	ldr	r2, [r7, #0]
 80008f2:	601a      	str	r2, [r3, #0]
    Song[noteCount].space = 10;
 80008f4:	49a0      	ldr	r1, [pc, #640]	@ (8000b78 <main+0x6c0>)
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	4613      	mov	r3, r2
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4413      	add	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	440b      	add	r3, r1
 8000902:	330c      	adds	r3, #12
 8000904:	220a      	movs	r2, #10
 8000906:	601a      	str	r2, [r3, #0]
    Song[noteCount].end = 0;
 8000908:	499b      	ldr	r1, [pc, #620]	@ (8000b78 <main+0x6c0>)
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	4613      	mov	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	440b      	add	r3, r1
 8000916:	3310      	adds	r3, #16
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
    noteCount++;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3301      	adds	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]

    Song[noteCount].note = E4;
 8000922:	4995      	ldr	r1, [pc, #596]	@ (8000b78 <main+0x6c0>)
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	4613      	mov	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	4413      	add	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	440b      	add	r3, r1
 8000930:	22be      	movs	r2, #190	@ 0xbe
 8000932:	601a      	str	r2, [r3, #0]
    Song[noteCount].size = _8th;
 8000934:	4990      	ldr	r1, [pc, #576]	@ (8000b78 <main+0x6c0>)
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	440b      	add	r3, r1
 8000942:	3304      	adds	r3, #4
 8000944:	2208      	movs	r2, #8
 8000946:	601a      	str	r2, [r3, #0]
    Song[noteCount].tempo = tempoForSong;
 8000948:	498b      	ldr	r1, [pc, #556]	@ (8000b78 <main+0x6c0>)
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	4613      	mov	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	440b      	add	r3, r1
 8000956:	3308      	adds	r3, #8
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	601a      	str	r2, [r3, #0]
    Song[noteCount].space = 10;
 800095c:	4986      	ldr	r1, [pc, #536]	@ (8000b78 <main+0x6c0>)
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	4613      	mov	r3, r2
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	4413      	add	r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	440b      	add	r3, r1
 800096a:	330c      	adds	r3, #12
 800096c:	220a      	movs	r2, #10
 800096e:	601a      	str	r2, [r3, #0]
    Song[noteCount].end = 0;
 8000970:	4981      	ldr	r1, [pc, #516]	@ (8000b78 <main+0x6c0>)
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	4613      	mov	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4413      	add	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	440b      	add	r3, r1
 800097e:	3310      	adds	r3, #16
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]
    noteCount++;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	3301      	adds	r3, #1
 8000988:	60fb      	str	r3, [r7, #12]

    Song[noteCount].note = F4;
 800098a:	497b      	ldr	r1, [pc, #492]	@ (8000b78 <main+0x6c0>)
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	4613      	mov	r3, r2
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	4413      	add	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	440b      	add	r3, r1
 8000998:	22b3      	movs	r2, #179	@ 0xb3
 800099a:	601a      	str	r2, [r3, #0]
    Song[noteCount].size = _8th;
 800099c:	4976      	ldr	r1, [pc, #472]	@ (8000b78 <main+0x6c0>)
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	4613      	mov	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	440b      	add	r3, r1
 80009aa:	3304      	adds	r3, #4
 80009ac:	2208      	movs	r2, #8
 80009ae:	601a      	str	r2, [r3, #0]
    Song[noteCount].tempo = tempoForSong;
 80009b0:	4971      	ldr	r1, [pc, #452]	@ (8000b78 <main+0x6c0>)
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4613      	mov	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	440b      	add	r3, r1
 80009be:	3308      	adds	r3, #8
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	601a      	str	r2, [r3, #0]
    Song[noteCount].space = 10;
 80009c4:	496c      	ldr	r1, [pc, #432]	@ (8000b78 <main+0x6c0>)
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4613      	mov	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	440b      	add	r3, r1
 80009d2:	330c      	adds	r3, #12
 80009d4:	220a      	movs	r2, #10
 80009d6:	601a      	str	r2, [r3, #0]
    Song[noteCount].end = 0;
 80009d8:	4967      	ldr	r1, [pc, #412]	@ (8000b78 <main+0x6c0>)
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	4613      	mov	r3, r2
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	4413      	add	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	440b      	add	r3, r1
 80009e6:	3310      	adds	r3, #16
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
    noteCount++;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3301      	adds	r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]

    Song[noteCount].note = D4;
 80009f2:	4961      	ldr	r1, [pc, #388]	@ (8000b78 <main+0x6c0>)
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	4613      	mov	r3, r2
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	4413      	add	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	440b      	add	r3, r1
 8000a00:	22d5      	movs	r2, #213	@ 0xd5
 8000a02:	601a      	str	r2, [r3, #0]
    Song[noteCount].size = _8th;
 8000a04:	495c      	ldr	r1, [pc, #368]	@ (8000b78 <main+0x6c0>)
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	440b      	add	r3, r1
 8000a12:	3304      	adds	r3, #4
 8000a14:	2208      	movs	r2, #8
 8000a16:	601a      	str	r2, [r3, #0]
    Song[noteCount].tempo = tempoForSong;
 8000a18:	4957      	ldr	r1, [pc, #348]	@ (8000b78 <main+0x6c0>)
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	440b      	add	r3, r1
 8000a26:	3308      	adds	r3, #8
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	601a      	str	r2, [r3, #0]
    Song[noteCount].space = 10;
 8000a2c:	4952      	ldr	r1, [pc, #328]	@ (8000b78 <main+0x6c0>)
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	4613      	mov	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	4413      	add	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	440b      	add	r3, r1
 8000a3a:	330c      	adds	r3, #12
 8000a3c:	220a      	movs	r2, #10
 8000a3e:	601a      	str	r2, [r3, #0]
    Song[noteCount].end = 0;
 8000a40:	494d      	ldr	r1, [pc, #308]	@ (8000b78 <main+0x6c0>)
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4613      	mov	r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	4413      	add	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	3310      	adds	r3, #16
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
    noteCount++;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]

    Song[noteCount].note = E4;
 8000a5a:	4947      	ldr	r1, [pc, #284]	@ (8000b78 <main+0x6c0>)
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	440b      	add	r3, r1
 8000a68:	22be      	movs	r2, #190	@ 0xbe
 8000a6a:	601a      	str	r2, [r3, #0]
    Song[noteCount].size = _8th;
 8000a6c:	4942      	ldr	r1, [pc, #264]	@ (8000b78 <main+0x6c0>)
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	4613      	mov	r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	4413      	add	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	440b      	add	r3, r1
 8000a7a:	3304      	adds	r3, #4
 8000a7c:	2208      	movs	r2, #8
 8000a7e:	601a      	str	r2, [r3, #0]
    Song[noteCount].tempo = tempoForSong;
 8000a80:	493d      	ldr	r1, [pc, #244]	@ (8000b78 <main+0x6c0>)
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	4613      	mov	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	3308      	adds	r3, #8
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	601a      	str	r2, [r3, #0]
    Song[noteCount].space = 10;
 8000a94:	4938      	ldr	r1, [pc, #224]	@ (8000b78 <main+0x6c0>)
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	4413      	add	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	330c      	adds	r3, #12
 8000aa4:	220a      	movs	r2, #10
 8000aa6:	601a      	str	r2, [r3, #0]
    Song[noteCount].end = 0;
 8000aa8:	4933      	ldr	r1, [pc, #204]	@ (8000b78 <main+0x6c0>)
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	4613      	mov	r3, r2
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	4413      	add	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	3310      	adds	r3, #16
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
    noteCount++;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]

    Song[noteCount].note = C4;
 8000ac2:	492d      	ldr	r1, [pc, #180]	@ (8000b78 <main+0x6c0>)
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	4413      	add	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	440b      	add	r3, r1
 8000ad0:	22ef      	movs	r2, #239	@ 0xef
 8000ad2:	601a      	str	r2, [r3, #0]
    Song[noteCount].size = _8th;
 8000ad4:	4928      	ldr	r1, [pc, #160]	@ (8000b78 <main+0x6c0>)
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	3304      	adds	r3, #4
 8000ae4:	2208      	movs	r2, #8
 8000ae6:	601a      	str	r2, [r3, #0]
    Song[noteCount].tempo = tempoForSong;
 8000ae8:	4923      	ldr	r1, [pc, #140]	@ (8000b78 <main+0x6c0>)
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	4613      	mov	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	440b      	add	r3, r1
 8000af6:	3308      	adds	r3, #8
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	601a      	str	r2, [r3, #0]
    Song[noteCount].space = 10;
 8000afc:	491e      	ldr	r1, [pc, #120]	@ (8000b78 <main+0x6c0>)
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	4613      	mov	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4413      	add	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	440b      	add	r3, r1
 8000b0a:	330c      	adds	r3, #12
 8000b0c:	220a      	movs	r2, #10
 8000b0e:	601a      	str	r2, [r3, #0]
    Song[noteCount].end = 0;
 8000b10:	4919      	ldr	r1, [pc, #100]	@ (8000b78 <main+0x6c0>)
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	4613      	mov	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	3310      	adds	r3, #16
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
    noteCount++;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3301      	adds	r3, #1
 8000b28:	60fb      	str	r3, [r7, #12]

    Song[noteCount].note = D4;
 8000b2a:	4913      	ldr	r1, [pc, #76]	@ (8000b78 <main+0x6c0>)
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4413      	add	r3, r2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	440b      	add	r3, r1
 8000b38:	22d5      	movs	r2, #213	@ 0xd5
 8000b3a:	601a      	str	r2, [r3, #0]
    Song[noteCount].size = _8th;
 8000b3c:	490e      	ldr	r1, [pc, #56]	@ (8000b78 <main+0x6c0>)
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	4613      	mov	r3, r2
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	4413      	add	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	440b      	add	r3, r1
 8000b4a:	3304      	adds	r3, #4
 8000b4c:	2208      	movs	r2, #8
 8000b4e:	601a      	str	r2, [r3, #0]
    Song[noteCount].tempo = tempoForSong;
 8000b50:	4909      	ldr	r1, [pc, #36]	@ (8000b78 <main+0x6c0>)
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	4613      	mov	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	3308      	adds	r3, #8
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	601a      	str	r2, [r3, #0]
    Song[noteCount].space = 10;
 8000b64:	4904      	ldr	r1, [pc, #16]	@ (8000b78 <main+0x6c0>)
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	4413      	add	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	440b      	add	r3, r1
 8000b72:	330c      	adds	r3, #12
 8000b74:	220a      	movs	r2, #10
 8000b76:	e001      	b.n	8000b7c <main+0x6c4>
 8000b78:	200000fc 	.word	0x200000fc
 8000b7c:	601a      	str	r2, [r3, #0]
    Song[noteCount].end = 0;
 8000b7e:	49bf      	ldr	r1, [pc, #764]	@ (8000e7c <main+0x9c4>)
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	4613      	mov	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	3310      	adds	r3, #16
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
    noteCount++;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3301      	adds	r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]

    Song[noteCount].note = B3;
 8000b98:	49b8      	ldr	r1, [pc, #736]	@ (8000e7c <main+0x9c4>)
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	22fd      	movs	r2, #253	@ 0xfd
 8000ba8:	601a      	str	r2, [r3, #0]
    Song[noteCount].size = _8th;
 8000baa:	49b4      	ldr	r1, [pc, #720]	@ (8000e7c <main+0x9c4>)
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2208      	movs	r2, #8
 8000bbc:	601a      	str	r2, [r3, #0]
    Song[noteCount].tempo = tempoForSong;
 8000bbe:	49af      	ldr	r1, [pc, #700]	@ (8000e7c <main+0x9c4>)
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	4413      	add	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	440b      	add	r3, r1
 8000bcc:	3308      	adds	r3, #8
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	601a      	str	r2, [r3, #0]
    Song[noteCount].space = 10;
 8000bd2:	49aa      	ldr	r1, [pc, #680]	@ (8000e7c <main+0x9c4>)
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	4413      	add	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	440b      	add	r3, r1
 8000be0:	330c      	adds	r3, #12
 8000be2:	220a      	movs	r2, #10
 8000be4:	601a      	str	r2, [r3, #0]
    Song[noteCount].end = 0;
 8000be6:	49a5      	ldr	r1, [pc, #660]	@ (8000e7c <main+0x9c4>)
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	4613      	mov	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	3310      	adds	r3, #16
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
    noteCount++;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
  for(introCount=0;introCount<6;introCount++){
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	3301      	adds	r3, #1
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	2b05      	cmp	r3, #5
 8000c0a:	f77f acb3 	ble.w	8000574 <main+0xbc>
  }
    //First 16
  Song[noteCount].note = C4;
 8000c0e:	499b      	ldr	r1, [pc, #620]	@ (8000e7c <main+0x9c4>)
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	4613      	mov	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4413      	add	r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	22ef      	movs	r2, #239	@ 0xef
 8000c1e:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _8th;
 8000c20:	4996      	ldr	r1, [pc, #600]	@ (8000e7c <main+0x9c4>)
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	4613      	mov	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	4413      	add	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	3304      	adds	r3, #4
 8000c30:	2208      	movs	r2, #8
 8000c32:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8000c34:	4991      	ldr	r1, [pc, #580]	@ (8000e7c <main+0x9c4>)
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	440b      	add	r3, r1
 8000c42:	3308      	adds	r3, #8
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8000c48:	498c      	ldr	r1, [pc, #560]	@ (8000e7c <main+0x9c4>)
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	440b      	add	r3, r1
 8000c56:	330c      	adds	r3, #12
 8000c58:	220a      	movs	r2, #10
 8000c5a:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8000c5c:	4987      	ldr	r1, [pc, #540]	@ (8000e7c <main+0x9c4>)
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	440b      	add	r3, r1
 8000c6a:	3310      	adds	r3, #16
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	3301      	adds	r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = D4;
 8000c76:	4981      	ldr	r1, [pc, #516]	@ (8000e7c <main+0x9c4>)
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	440b      	add	r3, r1
 8000c84:	22d5      	movs	r2, #213	@ 0xd5
 8000c86:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _8th;
 8000c88:	497c      	ldr	r1, [pc, #496]	@ (8000e7c <main+0x9c4>)
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	440b      	add	r3, r1
 8000c96:	3304      	adds	r3, #4
 8000c98:	2208      	movs	r2, #8
 8000c9a:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8000c9c:	4977      	ldr	r1, [pc, #476]	@ (8000e7c <main+0x9c4>)
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	3308      	adds	r3, #8
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8000cb0:	4972      	ldr	r1, [pc, #456]	@ (8000e7c <main+0x9c4>)
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	330c      	adds	r3, #12
 8000cc0:	220a      	movs	r2, #10
 8000cc2:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8000cc4:	496d      	ldr	r1, [pc, #436]	@ (8000e7c <main+0x9c4>)
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	3310      	adds	r3, #16
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = E4;
 8000cde:	4967      	ldr	r1, [pc, #412]	@ (8000e7c <main+0x9c4>)
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4413      	add	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	440b      	add	r3, r1
 8000cec:	22be      	movs	r2, #190	@ 0xbe
 8000cee:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _8th;
 8000cf0:	4962      	ldr	r1, [pc, #392]	@ (8000e7c <main+0x9c4>)
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	3304      	adds	r3, #4
 8000d00:	2208      	movs	r2, #8
 8000d02:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8000d04:	495d      	ldr	r1, [pc, #372]	@ (8000e7c <main+0x9c4>)
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	440b      	add	r3, r1
 8000d12:	3308      	adds	r3, #8
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8000d18:	4958      	ldr	r1, [pc, #352]	@ (8000e7c <main+0x9c4>)
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	440b      	add	r3, r1
 8000d26:	330c      	adds	r3, #12
 8000d28:	220a      	movs	r2, #10
 8000d2a:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8000d2c:	4953      	ldr	r1, [pc, #332]	@ (8000e7c <main+0x9c4>)
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	440b      	add	r3, r1
 8000d3a:	3310      	adds	r3, #16
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3301      	adds	r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C4;
 8000d46:	494d      	ldr	r1, [pc, #308]	@ (8000e7c <main+0x9c4>)
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	440b      	add	r3, r1
 8000d54:	22ef      	movs	r2, #239	@ 0xef
 8000d56:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _8th;
 8000d58:	4948      	ldr	r1, [pc, #288]	@ (8000e7c <main+0x9c4>)
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	440b      	add	r3, r1
 8000d66:	3304      	adds	r3, #4
 8000d68:	2208      	movs	r2, #8
 8000d6a:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8000d6c:	4943      	ldr	r1, [pc, #268]	@ (8000e7c <main+0x9c4>)
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	3308      	adds	r3, #8
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8000d80:	493e      	ldr	r1, [pc, #248]	@ (8000e7c <main+0x9c4>)
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	4613      	mov	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	330c      	adds	r3, #12
 8000d90:	220a      	movs	r2, #10
 8000d92:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8000d94:	4939      	ldr	r1, [pc, #228]	@ (8000e7c <main+0x9c4>)
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	440b      	add	r3, r1
 8000da2:	3310      	adds	r3, #16
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3301      	adds	r3, #1
 8000dac:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = D4;
 8000dae:	4933      	ldr	r1, [pc, #204]	@ (8000e7c <main+0x9c4>)
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	440b      	add	r3, r1
 8000dbc:	22d5      	movs	r2, #213	@ 0xd5
 8000dbe:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _8th;
 8000dc0:	492e      	ldr	r1, [pc, #184]	@ (8000e7c <main+0x9c4>)
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	440b      	add	r3, r1
 8000dce:	3304      	adds	r3, #4
 8000dd0:	2208      	movs	r2, #8
 8000dd2:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8000dd4:	4929      	ldr	r1, [pc, #164]	@ (8000e7c <main+0x9c4>)
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	440b      	add	r3, r1
 8000de2:	3308      	adds	r3, #8
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8000de8:	4924      	ldr	r1, [pc, #144]	@ (8000e7c <main+0x9c4>)
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	440b      	add	r3, r1
 8000df6:	330c      	adds	r3, #12
 8000df8:	220a      	movs	r2, #10
 8000dfa:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8000dfc:	491f      	ldr	r1, [pc, #124]	@ (8000e7c <main+0x9c4>)
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	440b      	add	r3, r1
 8000e0a:	3310      	adds	r3, #16
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3301      	adds	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = E4;
 8000e16:	4919      	ldr	r1, [pc, #100]	@ (8000e7c <main+0x9c4>)
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	440b      	add	r3, r1
 8000e24:	22be      	movs	r2, #190	@ 0xbe
 8000e26:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _8th;
 8000e28:	4914      	ldr	r1, [pc, #80]	@ (8000e7c <main+0x9c4>)
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	440b      	add	r3, r1
 8000e36:	3304      	adds	r3, #4
 8000e38:	2208      	movs	r2, #8
 8000e3a:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8000e3c:	490f      	ldr	r1, [pc, #60]	@ (8000e7c <main+0x9c4>)
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	440b      	add	r3, r1
 8000e4a:	3308      	adds	r3, #8
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8000e50:	490a      	ldr	r1, [pc, #40]	@ (8000e7c <main+0x9c4>)
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	4613      	mov	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	330c      	adds	r3, #12
 8000e60:	220a      	movs	r2, #10
 8000e62:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8000e64:	4905      	ldr	r1, [pc, #20]	@ (8000e7c <main+0x9c4>)
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	440b      	add	r3, r1
 8000e72:	3310      	adds	r3, #16
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	e001      	b.n	8000e80 <main+0x9c8>
 8000e7c:	200000fc 	.word	0x200000fc
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = F4;
 8000e84:	49bf      	ldr	r1, [pc, #764]	@ (8001184 <main+0xccc>)
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	440b      	add	r3, r1
 8000e92:	22b3      	movs	r2, #179	@ 0xb3
 8000e94:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _8th;
 8000e96:	49bb      	ldr	r1, [pc, #748]	@ (8001184 <main+0xccc>)
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8000eaa:	49b6      	ldr	r1, [pc, #728]	@ (8001184 <main+0xccc>)
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	3308      	adds	r3, #8
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8000ebe:	49b1      	ldr	r1, [pc, #708]	@ (8001184 <main+0xccc>)
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	440b      	add	r3, r1
 8000ecc:	330c      	adds	r3, #12
 8000ece:	220a      	movs	r2, #10
 8000ed0:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8000ed2:	49ac      	ldr	r1, [pc, #688]	@ (8001184 <main+0xccc>)
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	440b      	add	r3, r1
 8000ee0:	3310      	adds	r3, #16
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = D4;
 8000eec:	49a5      	ldr	r1, [pc, #660]	@ (8001184 <main+0xccc>)
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	440b      	add	r3, r1
 8000efa:	22d5      	movs	r2, #213	@ 0xd5
 8000efc:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _8th;
 8000efe:	49a1      	ldr	r1, [pc, #644]	@ (8001184 <main+0xccc>)
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2208      	movs	r2, #8
 8000f10:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8000f12:	499c      	ldr	r1, [pc, #624]	@ (8001184 <main+0xccc>)
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	440b      	add	r3, r1
 8000f20:	3308      	adds	r3, #8
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8000f26:	4997      	ldr	r1, [pc, #604]	@ (8001184 <main+0xccc>)
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	330c      	adds	r3, #12
 8000f36:	220a      	movs	r2, #10
 8000f38:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8000f3a:	4992      	ldr	r1, [pc, #584]	@ (8001184 <main+0xccc>)
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	3310      	adds	r3, #16
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3301      	adds	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]



  Song[noteCount].note = B3;
 8000f54:	498b      	ldr	r1, [pc, #556]	@ (8001184 <main+0xccc>)
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	22fd      	movs	r2, #253	@ 0xfd
 8000f64:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8000f66:	4987      	ldr	r1, [pc, #540]	@ (8001184 <main+0xccc>)
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	3304      	adds	r3, #4
 8000f76:	2210      	movs	r2, #16
 8000f78:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8000f7a:	4982      	ldr	r1, [pc, #520]	@ (8001184 <main+0xccc>)
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	3308      	adds	r3, #8
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8000f8e:	497d      	ldr	r1, [pc, #500]	@ (8001184 <main+0xccc>)
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	330c      	adds	r3, #12
 8000f9e:	220a      	movs	r2, #10
 8000fa0:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8000fa2:	4978      	ldr	r1, [pc, #480]	@ (8001184 <main+0xccc>)
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	3310      	adds	r3, #16
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = F4;
 8000fbc:	4971      	ldr	r1, [pc, #452]	@ (8001184 <main+0xccc>)
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	22b3      	movs	r2, #179	@ 0xb3
 8000fcc:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8000fce:	496d      	ldr	r1, [pc, #436]	@ (8001184 <main+0xccc>)
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2210      	movs	r2, #16
 8000fe0:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8000fe2:	4968      	ldr	r1, [pc, #416]	@ (8001184 <main+0xccc>)
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	3308      	adds	r3, #8
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8000ff6:	4963      	ldr	r1, [pc, #396]	@ (8001184 <main+0xccc>)
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	330c      	adds	r3, #12
 8001006:	220a      	movs	r2, #10
 8001008:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 800100a:	495e      	ldr	r1, [pc, #376]	@ (8001184 <main+0xccc>)
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	3310      	adds	r3, #16
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
  noteCount++;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3301      	adds	r3, #1
 8001022:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = E4;
 8001024:	4957      	ldr	r1, [pc, #348]	@ (8001184 <main+0xccc>)
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	22be      	movs	r2, #190	@ 0xbe
 8001034:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8001036:	4953      	ldr	r1, [pc, #332]	@ (8001184 <main+0xccc>)
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	3304      	adds	r3, #4
 8001046:	2210      	movs	r2, #16
 8001048:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 800104a:	494e      	ldr	r1, [pc, #312]	@ (8001184 <main+0xccc>)
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	3308      	adds	r3, #8
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 800105e:	4949      	ldr	r1, [pc, #292]	@ (8001184 <main+0xccc>)
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	330c      	adds	r3, #12
 800106e:	220a      	movs	r2, #10
 8001070:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001072:	4944      	ldr	r1, [pc, #272]	@ (8001184 <main+0xccc>)
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	440b      	add	r3, r1
 8001080:	3310      	adds	r3, #16
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3301      	adds	r3, #1
 800108a:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C4;
 800108c:	493d      	ldr	r1, [pc, #244]	@ (8001184 <main+0xccc>)
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	22ef      	movs	r2, #239	@ 0xef
 800109c:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 800109e:	4939      	ldr	r1, [pc, #228]	@ (8001184 <main+0xccc>)
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	3304      	adds	r3, #4
 80010ae:	2210      	movs	r2, #16
 80010b0:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 80010b2:	4934      	ldr	r1, [pc, #208]	@ (8001184 <main+0xccc>)
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	3308      	adds	r3, #8
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 80010c6:	492f      	ldr	r1, [pc, #188]	@ (8001184 <main+0xccc>)
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	330c      	adds	r3, #12
 80010d6:	220a      	movs	r2, #10
 80010d8:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 80010da:	492a      	ldr	r1, [pc, #168]	@ (8001184 <main+0xccc>)
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	440b      	add	r3, r1
 80010e8:	3310      	adds	r3, #16
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
  noteCount++;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	3301      	adds	r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]



  Song[noteCount].note = B3;
 80010f4:	4923      	ldr	r1, [pc, #140]	@ (8001184 <main+0xccc>)
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	22fd      	movs	r2, #253	@ 0xfd
 8001104:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8001106:	491f      	ldr	r1, [pc, #124]	@ (8001184 <main+0xccc>)
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	3304      	adds	r3, #4
 8001116:	2210      	movs	r2, #16
 8001118:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 800111a:	491a      	ldr	r1, [pc, #104]	@ (8001184 <main+0xccc>)
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	3308      	adds	r3, #8
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 800112e:	4915      	ldr	r1, [pc, #84]	@ (8001184 <main+0xccc>)
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	330c      	adds	r3, #12
 800113e:	220a      	movs	r2, #10
 8001140:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001142:	4910      	ldr	r1, [pc, #64]	@ (8001184 <main+0xccc>)
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	3310      	adds	r3, #16
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3301      	adds	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C4;
 800115c:	4909      	ldr	r1, [pc, #36]	@ (8001184 <main+0xccc>)
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	22ef      	movs	r2, #239	@ 0xef
 800116c:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 800116e:	4905      	ldr	r1, [pc, #20]	@ (8001184 <main+0xccc>)
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	3304      	adds	r3, #4
 800117e:	2210      	movs	r2, #16
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e001      	b.n	8001188 <main+0xcd0>
 8001184:	200000fc 	.word	0x200000fc
  Song[noteCount].tempo = tempoForSong;
 8001188:	49bf      	ldr	r1, [pc, #764]	@ (8001488 <main+0xfd0>)
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	4613      	mov	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	3308      	adds	r3, #8
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 800119c:	49ba      	ldr	r1, [pc, #744]	@ (8001488 <main+0xfd0>)
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	330c      	adds	r3, #12
 80011ac:	220a      	movs	r2, #10
 80011ae:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 80011b0:	49b5      	ldr	r1, [pc, #724]	@ (8001488 <main+0xfd0>)
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	3310      	adds	r3, #16
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
  noteCount++;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3301      	adds	r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = E4;
 80011ca:	49af      	ldr	r1, [pc, #700]	@ (8001488 <main+0xfd0>)
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	22be      	movs	r2, #190	@ 0xbe
 80011da:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 80011dc:	49aa      	ldr	r1, [pc, #680]	@ (8001488 <main+0xfd0>)
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	3304      	adds	r3, #4
 80011ec:	2210      	movs	r2, #16
 80011ee:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 80011f0:	49a5      	ldr	r1, [pc, #660]	@ (8001488 <main+0xfd0>)
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	3308      	adds	r3, #8
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001204:	49a0      	ldr	r1, [pc, #640]	@ (8001488 <main+0xfd0>)
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	330c      	adds	r3, #12
 8001214:	220a      	movs	r2, #10
 8001216:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001218:	499b      	ldr	r1, [pc, #620]	@ (8001488 <main+0xfd0>)
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	3310      	adds	r3, #16
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
  noteCount++;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	3301      	adds	r3, #1
 8001230:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = F4;
 8001232:	4995      	ldr	r1, [pc, #596]	@ (8001488 <main+0xfd0>)
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	22b3      	movs	r2, #179	@ 0xb3
 8001242:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8001244:	4990      	ldr	r1, [pc, #576]	@ (8001488 <main+0xfd0>)
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	3304      	adds	r3, #4
 8001254:	2210      	movs	r2, #16
 8001256:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001258:	498b      	ldr	r1, [pc, #556]	@ (8001488 <main+0xfd0>)
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	3308      	adds	r3, #8
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 800126c:	4986      	ldr	r1, [pc, #536]	@ (8001488 <main+0xfd0>)
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	330c      	adds	r3, #12
 800127c:	220a      	movs	r2, #10
 800127e:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001280:	4981      	ldr	r1, [pc, #516]	@ (8001488 <main+0xfd0>)
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	3310      	adds	r3, #16
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3301      	adds	r3, #1
 8001298:	60fb      	str	r3, [r7, #12]


  Song[noteCount].note = B4;
 800129a:	497b      	ldr	r1, [pc, #492]	@ (8001488 <main+0xfd0>)
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	227f      	movs	r2, #127	@ 0x7f
 80012aa:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 80012ac:	4976      	ldr	r1, [pc, #472]	@ (8001488 <main+0xfd0>)
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	3304      	adds	r3, #4
 80012bc:	2210      	movs	r2, #16
 80012be:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 80012c0:	4971      	ldr	r1, [pc, #452]	@ (8001488 <main+0xfd0>)
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	3308      	adds	r3, #8
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 80012d4:	496c      	ldr	r1, [pc, #432]	@ (8001488 <main+0xfd0>)
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	330c      	adds	r3, #12
 80012e4:	220a      	movs	r2, #10
 80012e6:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 80012e8:	4967      	ldr	r1, [pc, #412]	@ (8001488 <main+0xfd0>)
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	3310      	adds	r3, #16
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
  noteCount++;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3301      	adds	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = G4;
 8001302:	4961      	ldr	r1, [pc, #388]	@ (8001488 <main+0xfd0>)
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	229f      	movs	r2, #159	@ 0x9f
 8001312:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8001314:	495c      	ldr	r1, [pc, #368]	@ (8001488 <main+0xfd0>)
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	3304      	adds	r3, #4
 8001324:	2210      	movs	r2, #16
 8001326:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001328:	4957      	ldr	r1, [pc, #348]	@ (8001488 <main+0xfd0>)
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	3308      	adds	r3, #8
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 800133c:	4952      	ldr	r1, [pc, #328]	@ (8001488 <main+0xfd0>)
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	330c      	adds	r3, #12
 800134c:	220a      	movs	r2, #10
 800134e:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001350:	494d      	ldr	r1, [pc, #308]	@ (8001488 <main+0xfd0>)
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	3310      	adds	r3, #16
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3301      	adds	r3, #1
 8001368:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C5;
 800136a:	4947      	ldr	r1, [pc, #284]	@ (8001488 <main+0xfd0>)
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	2277      	movs	r2, #119	@ 0x77
 800137a:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 800137c:	4942      	ldr	r1, [pc, #264]	@ (8001488 <main+0xfd0>)
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	3304      	adds	r3, #4
 800138c:	2210      	movs	r2, #16
 800138e:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001390:	493d      	ldr	r1, [pc, #244]	@ (8001488 <main+0xfd0>)
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	3308      	adds	r3, #8
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 80013a4:	4938      	ldr	r1, [pc, #224]	@ (8001488 <main+0xfd0>)
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	330c      	adds	r3, #12
 80013b4:	220a      	movs	r2, #10
 80013b6:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 80013b8:	4933      	ldr	r1, [pc, #204]	@ (8001488 <main+0xfd0>)
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	3310      	adds	r3, #16
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
  noteCount++;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3301      	adds	r3, #1
 80013d0:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = B4;
 80013d2:	492d      	ldr	r1, [pc, #180]	@ (8001488 <main+0xfd0>)
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	227f      	movs	r2, #127	@ 0x7f
 80013e2:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 80013e4:	4928      	ldr	r1, [pc, #160]	@ (8001488 <main+0xfd0>)
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	3304      	adds	r3, #4
 80013f4:	2210      	movs	r2, #16
 80013f6:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 80013f8:	4923      	ldr	r1, [pc, #140]	@ (8001488 <main+0xfd0>)
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	3308      	adds	r3, #8
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 800140c:	491e      	ldr	r1, [pc, #120]	@ (8001488 <main+0xfd0>)
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	330c      	adds	r3, #12
 800141c:	220a      	movs	r2, #10
 800141e:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001420:	4919      	ldr	r1, [pc, #100]	@ (8001488 <main+0xfd0>)
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	3310      	adds	r3, #16
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3301      	adds	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]


  Song[noteCount].note = G4;
 800143a:	4913      	ldr	r1, [pc, #76]	@ (8001488 <main+0xfd0>)
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	229f      	movs	r2, #159	@ 0x9f
 800144a:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 800144c:	490e      	ldr	r1, [pc, #56]	@ (8001488 <main+0xfd0>)
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	3304      	adds	r3, #4
 800145c:	2210      	movs	r2, #16
 800145e:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001460:	4909      	ldr	r1, [pc, #36]	@ (8001488 <main+0xfd0>)
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	3308      	adds	r3, #8
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001474:	4904      	ldr	r1, [pc, #16]	@ (8001488 <main+0xfd0>)
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	330c      	adds	r3, #12
 8001484:	220a      	movs	r2, #10
 8001486:	e001      	b.n	800148c <main+0xfd4>
 8001488:	200000fc 	.word	0x200000fc
 800148c:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 800148e:	49c0      	ldr	r1, [pc, #768]	@ (8001790 <main+0x12d8>)
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	440b      	add	r3, r1
 800149c:	3310      	adds	r3, #16
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
  noteCount++;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = F4;
 80014a8:	49b9      	ldr	r1, [pc, #740]	@ (8001790 <main+0x12d8>)
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	22b3      	movs	r2, #179	@ 0xb3
 80014b8:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 80014ba:	49b5      	ldr	r1, [pc, #724]	@ (8001790 <main+0x12d8>)
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	3304      	adds	r3, #4
 80014ca:	2210      	movs	r2, #16
 80014cc:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 80014ce:	49b0      	ldr	r1, [pc, #704]	@ (8001790 <main+0x12d8>)
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	3308      	adds	r3, #8
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 80014e2:	49ab      	ldr	r1, [pc, #684]	@ (8001790 <main+0x12d8>)
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	330c      	adds	r3, #12
 80014f2:	220a      	movs	r2, #10
 80014f4:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 80014f6:	49a6      	ldr	r1, [pc, #664]	@ (8001790 <main+0x12d8>)
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	3310      	adds	r3, #16
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
  noteCount++;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3301      	adds	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = E4;
 8001510:	499f      	ldr	r1, [pc, #636]	@ (8001790 <main+0x12d8>)
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	22be      	movs	r2, #190	@ 0xbe
 8001520:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8001522:	499b      	ldr	r1, [pc, #620]	@ (8001790 <main+0x12d8>)
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	3304      	adds	r3, #4
 8001532:	2210      	movs	r2, #16
 8001534:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001536:	4996      	ldr	r1, [pc, #600]	@ (8001790 <main+0x12d8>)
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	3308      	adds	r3, #8
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 800154a:	4991      	ldr	r1, [pc, #580]	@ (8001790 <main+0x12d8>)
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	330c      	adds	r3, #12
 800155a:	220a      	movs	r2, #10
 800155c:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 800155e:	498c      	ldr	r1, [pc, #560]	@ (8001790 <main+0x12d8>)
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3310      	adds	r3, #16
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3301      	adds	r3, #1
 8001576:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = F4;
 8001578:	4985      	ldr	r1, [pc, #532]	@ (8001790 <main+0x12d8>)
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	22b3      	movs	r2, #179	@ 0xb3
 8001588:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 800158a:	4981      	ldr	r1, [pc, #516]	@ (8001790 <main+0x12d8>)
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	3304      	adds	r3, #4
 800159a:	2210      	movs	r2, #16
 800159c:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 800159e:	497c      	ldr	r1, [pc, #496]	@ (8001790 <main+0x12d8>)
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	3308      	adds	r3, #8
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 80015b2:	4977      	ldr	r1, [pc, #476]	@ (8001790 <main+0x12d8>)
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	330c      	adds	r3, #12
 80015c2:	220a      	movs	r2, #10
 80015c4:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 80015c6:	4972      	ldr	r1, [pc, #456]	@ (8001790 <main+0x12d8>)
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	3310      	adds	r3, #16
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
  noteCount++;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	3301      	adds	r3, #1
 80015de:	60fb      	str	r3, [r7, #12]



  Song[noteCount].note = G4;
 80015e0:	496b      	ldr	r1, [pc, #428]	@ (8001790 <main+0x12d8>)
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	229f      	movs	r2, #159	@ 0x9f
 80015f0:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = quarter;
 80015f2:	4967      	ldr	r1, [pc, #412]	@ (8001790 <main+0x12d8>)
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	3304      	adds	r3, #4
 8001602:	2204      	movs	r2, #4
 8001604:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001606:	4962      	ldr	r1, [pc, #392]	@ (8001790 <main+0x12d8>)
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	3308      	adds	r3, #8
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 800161a:	495d      	ldr	r1, [pc, #372]	@ (8001790 <main+0x12d8>)
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	330c      	adds	r3, #12
 800162a:	220a      	movs	r2, #10
 800162c:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 800162e:	4958      	ldr	r1, [pc, #352]	@ (8001790 <main+0x12d8>)
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	3310      	adds	r3, #16
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3301      	adds	r3, #1
 8001646:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C3;
 8001648:	4951      	ldr	r1, [pc, #324]	@ (8001790 <main+0x12d8>)
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 800165a:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 800165c:	494c      	ldr	r1, [pc, #304]	@ (8001790 <main+0x12d8>)
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	3304      	adds	r3, #4
 800166c:	2210      	movs	r2, #16
 800166e:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001670:	4947      	ldr	r1, [pc, #284]	@ (8001790 <main+0x12d8>)
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	3308      	adds	r3, #8
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001684:	4942      	ldr	r1, [pc, #264]	@ (8001790 <main+0x12d8>)
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	330c      	adds	r3, #12
 8001694:	220a      	movs	r2, #10
 8001696:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001698:	493d      	ldr	r1, [pc, #244]	@ (8001790 <main+0x12d8>)
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	3310      	adds	r3, #16
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
  noteCount++;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3301      	adds	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C3;
 80016b2:	4937      	ldr	r1, [pc, #220]	@ (8001790 <main+0x12d8>)
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 80016c4:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 80016c6:	4932      	ldr	r1, [pc, #200]	@ (8001790 <main+0x12d8>)
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	3304      	adds	r3, #4
 80016d6:	2210      	movs	r2, #16
 80016d8:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 80016da:	492d      	ldr	r1, [pc, #180]	@ (8001790 <main+0x12d8>)
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	3308      	adds	r3, #8
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 80016ee:	4928      	ldr	r1, [pc, #160]	@ (8001790 <main+0x12d8>)
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	330c      	adds	r3, #12
 80016fe:	220a      	movs	r2, #10
 8001700:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001702:	4923      	ldr	r1, [pc, #140]	@ (8001790 <main+0x12d8>)
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	3310      	adds	r3, #16
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3301      	adds	r3, #1
 800171a:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C3;
 800171c:	491c      	ldr	r1, [pc, #112]	@ (8001790 <main+0x12d8>)
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 800172e:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8001730:	4917      	ldr	r1, [pc, #92]	@ (8001790 <main+0x12d8>)
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	3304      	adds	r3, #4
 8001740:	2210      	movs	r2, #16
 8001742:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001744:	4912      	ldr	r1, [pc, #72]	@ (8001790 <main+0x12d8>)
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	3308      	adds	r3, #8
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001758:	490d      	ldr	r1, [pc, #52]	@ (8001790 <main+0x12d8>)
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	330c      	adds	r3, #12
 8001768:	220a      	movs	r2, #10
 800176a:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 800176c:	4908      	ldr	r1, [pc, #32]	@ (8001790 <main+0x12d8>)
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	3310      	adds	r3, #16
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C3;
 8001786:	4902      	ldr	r1, [pc, #8]	@ (8001790 <main+0x12d8>)
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	4613      	mov	r3, r2
 800178c:	e002      	b.n	8001794 <main+0x12dc>
 800178e:	bf00      	nop
 8001790:	200000fc 	.word	0x200000fc
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 80017a0:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 80017a2:	49c0      	ldr	r1, [pc, #768]	@ (8001aa4 <main+0x15ec>)
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	3304      	adds	r3, #4
 80017b2:	2210      	movs	r2, #16
 80017b4:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 80017b6:	49bb      	ldr	r1, [pc, #748]	@ (8001aa4 <main+0x15ec>)
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	3308      	adds	r3, #8
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 80017ca:	49b6      	ldr	r1, [pc, #728]	@ (8001aa4 <main+0x15ec>)
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	330c      	adds	r3, #12
 80017da:	220a      	movs	r2, #10
 80017dc:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 80017de:	49b1      	ldr	r1, [pc, #708]	@ (8001aa4 <main+0x15ec>)
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	3310      	adds	r3, #16
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
  noteCount++;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3301      	adds	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]


  Song[noteCount].note = E4;
 80017f8:	49aa      	ldr	r1, [pc, #680]	@ (8001aa4 <main+0x15ec>)
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	22be      	movs	r2, #190	@ 0xbe
 8001808:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _8th;
 800180a:	49a6      	ldr	r1, [pc, #664]	@ (8001aa4 <main+0x15ec>)
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	3304      	adds	r3, #4
 800181a:	2208      	movs	r2, #8
 800181c:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 800181e:	49a1      	ldr	r1, [pc, #644]	@ (8001aa4 <main+0x15ec>)
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	3308      	adds	r3, #8
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001832:	499c      	ldr	r1, [pc, #624]	@ (8001aa4 <main+0x15ec>)
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	330c      	adds	r3, #12
 8001842:	220a      	movs	r2, #10
 8001844:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001846:	4997      	ldr	r1, [pc, #604]	@ (8001aa4 <main+0x15ec>)
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	3310      	adds	r3, #16
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
  noteCount++;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3301      	adds	r3, #1
 800185e:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C3;
 8001860:	4990      	ldr	r1, [pc, #576]	@ (8001aa4 <main+0x15ec>)
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 8001872:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8001874:	498b      	ldr	r1, [pc, #556]	@ (8001aa4 <main+0x15ec>)
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	3304      	adds	r3, #4
 8001884:	2210      	movs	r2, #16
 8001886:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001888:	4986      	ldr	r1, [pc, #536]	@ (8001aa4 <main+0x15ec>)
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	3308      	adds	r3, #8
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 800189c:	4981      	ldr	r1, [pc, #516]	@ (8001aa4 <main+0x15ec>)
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	330c      	adds	r3, #12
 80018ac:	220a      	movs	r2, #10
 80018ae:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 80018b0:	497c      	ldr	r1, [pc, #496]	@ (8001aa4 <main+0x15ec>)
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	3310      	adds	r3, #16
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
  noteCount++;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C3;
 80018ca:	4976      	ldr	r1, [pc, #472]	@ (8001aa4 <main+0x15ec>)
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 80018dc:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 80018de:	4971      	ldr	r1, [pc, #452]	@ (8001aa4 <main+0x15ec>)
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	3304      	adds	r3, #4
 80018ee:	2210      	movs	r2, #16
 80018f0:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 80018f2:	496c      	ldr	r1, [pc, #432]	@ (8001aa4 <main+0x15ec>)
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3308      	adds	r3, #8
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001906:	4967      	ldr	r1, [pc, #412]	@ (8001aa4 <main+0x15ec>)
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	330c      	adds	r3, #12
 8001916:	220a      	movs	r2, #10
 8001918:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 800191a:	4962      	ldr	r1, [pc, #392]	@ (8001aa4 <main+0x15ec>)
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3310      	adds	r3, #16
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
  noteCount++;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	3301      	adds	r3, #1
 8001932:	60fb      	str	r3, [r7, #12]



  Song[noteCount].note = G4;
 8001934:	495b      	ldr	r1, [pc, #364]	@ (8001aa4 <main+0x15ec>)
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	229f      	movs	r2, #159	@ 0x9f
 8001944:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = quarter;
 8001946:	4957      	ldr	r1, [pc, #348]	@ (8001aa4 <main+0x15ec>)
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	3304      	adds	r3, #4
 8001956:	2204      	movs	r2, #4
 8001958:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 800195a:	4952      	ldr	r1, [pc, #328]	@ (8001aa4 <main+0x15ec>)
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	3308      	adds	r3, #8
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 800196e:	494d      	ldr	r1, [pc, #308]	@ (8001aa4 <main+0x15ec>)
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	330c      	adds	r3, #12
 800197e:	220a      	movs	r2, #10
 8001980:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001982:	4948      	ldr	r1, [pc, #288]	@ (8001aa4 <main+0x15ec>)
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	3310      	adds	r3, #16
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3301      	adds	r3, #1
 800199a:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C3;
 800199c:	4941      	ldr	r1, [pc, #260]	@ (8001aa4 <main+0x15ec>)
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 80019ae:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 80019b0:	493c      	ldr	r1, [pc, #240]	@ (8001aa4 <main+0x15ec>)
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	3304      	adds	r3, #4
 80019c0:	2210      	movs	r2, #16
 80019c2:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 80019c4:	4937      	ldr	r1, [pc, #220]	@ (8001aa4 <main+0x15ec>)
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	3308      	adds	r3, #8
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 80019d8:	4932      	ldr	r1, [pc, #200]	@ (8001aa4 <main+0x15ec>)
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	330c      	adds	r3, #12
 80019e8:	220a      	movs	r2, #10
 80019ea:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 80019ec:	492d      	ldr	r1, [pc, #180]	@ (8001aa4 <main+0x15ec>)
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	3310      	adds	r3, #16
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3301      	adds	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C3;
 8001a06:	4927      	ldr	r1, [pc, #156]	@ (8001aa4 <main+0x15ec>)
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 8001a18:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8001a1a:	4922      	ldr	r1, [pc, #136]	@ (8001aa4 <main+0x15ec>)
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2210      	movs	r2, #16
 8001a2c:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001a2e:	491d      	ldr	r1, [pc, #116]	@ (8001aa4 <main+0x15ec>)
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	3308      	adds	r3, #8
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001a42:	4918      	ldr	r1, [pc, #96]	@ (8001aa4 <main+0x15ec>)
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	330c      	adds	r3, #12
 8001a52:	220a      	movs	r2, #10
 8001a54:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001a56:	4913      	ldr	r1, [pc, #76]	@ (8001aa4 <main+0x15ec>)
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	3310      	adds	r3, #16
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C3;
 8001a70:	490c      	ldr	r1, [pc, #48]	@ (8001aa4 <main+0x15ec>)
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 8001a82:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8001a84:	4907      	ldr	r1, [pc, #28]	@ (8001aa4 <main+0x15ec>)
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	3304      	adds	r3, #4
 8001a94:	2210      	movs	r2, #16
 8001a96:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001a98:	4902      	ldr	r1, [pc, #8]	@ (8001aa4 <main+0x15ec>)
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	e001      	b.n	8001aa8 <main+0x15f0>
 8001aa4:	200000fc 	.word	0x200000fc
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	3308      	adds	r3, #8
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001ab2:	49c0      	ldr	r1, [pc, #768]	@ (8001db4 <main+0x18fc>)
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	330c      	adds	r3, #12
 8001ac2:	220a      	movs	r2, #10
 8001ac4:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001ac6:	49bb      	ldr	r1, [pc, #748]	@ (8001db4 <main+0x18fc>)
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	3310      	adds	r3, #16
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3301      	adds	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C3;
 8001ae0:	49b4      	ldr	r1, [pc, #720]	@ (8001db4 <main+0x18fc>)
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 8001af2:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8001af4:	49af      	ldr	r1, [pc, #700]	@ (8001db4 <main+0x18fc>)
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	3304      	adds	r3, #4
 8001b04:	2210      	movs	r2, #16
 8001b06:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001b08:	49aa      	ldr	r1, [pc, #680]	@ (8001db4 <main+0x18fc>)
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	3308      	adds	r3, #8
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001b1c:	49a5      	ldr	r1, [pc, #660]	@ (8001db4 <main+0x18fc>)
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	330c      	adds	r3, #12
 8001b2c:	220a      	movs	r2, #10
 8001b2e:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001b30:	49a0      	ldr	r1, [pc, #640]	@ (8001db4 <main+0x18fc>)
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3310      	adds	r3, #16
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3301      	adds	r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]



  Song[noteCount].note = E4;
 8001b4a:	499a      	ldr	r1, [pc, #616]	@ (8001db4 <main+0x18fc>)
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	22be      	movs	r2, #190	@ 0xbe
 8001b5a:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _8th;
 8001b5c:	4995      	ldr	r1, [pc, #596]	@ (8001db4 <main+0x18fc>)
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001b70:	4990      	ldr	r1, [pc, #576]	@ (8001db4 <main+0x18fc>)
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	3308      	adds	r3, #8
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001b84:	498b      	ldr	r1, [pc, #556]	@ (8001db4 <main+0x18fc>)
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	330c      	adds	r3, #12
 8001b94:	220a      	movs	r2, #10
 8001b96:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001b98:	4986      	ldr	r1, [pc, #536]	@ (8001db4 <main+0x18fc>)
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	3310      	adds	r3, #16
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C3;
 8001bb2:	4980      	ldr	r1, [pc, #512]	@ (8001db4 <main+0x18fc>)
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 8001bc4:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8001bc6:	497b      	ldr	r1, [pc, #492]	@ (8001db4 <main+0x18fc>)
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2210      	movs	r2, #16
 8001bd8:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001bda:	4976      	ldr	r1, [pc, #472]	@ (8001db4 <main+0x18fc>)
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	3308      	adds	r3, #8
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001bee:	4971      	ldr	r1, [pc, #452]	@ (8001db4 <main+0x18fc>)
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	330c      	adds	r3, #12
 8001bfe:	220a      	movs	r2, #10
 8001c00:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001c02:	496c      	ldr	r1, [pc, #432]	@ (8001db4 <main+0x18fc>)
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	3310      	adds	r3, #16
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C3;
 8001c1c:	4965      	ldr	r1, [pc, #404]	@ (8001db4 <main+0x18fc>)
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 8001c2e:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8001c30:	4960      	ldr	r1, [pc, #384]	@ (8001db4 <main+0x18fc>)
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3304      	adds	r3, #4
 8001c40:	2210      	movs	r2, #16
 8001c42:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001c44:	495b      	ldr	r1, [pc, #364]	@ (8001db4 <main+0x18fc>)
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	3308      	adds	r3, #8
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001c58:	4956      	ldr	r1, [pc, #344]	@ (8001db4 <main+0x18fc>)
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	330c      	adds	r3, #12
 8001c68:	220a      	movs	r2, #10
 8001c6a:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001c6c:	4951      	ldr	r1, [pc, #324]	@ (8001db4 <main+0x18fc>)
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	3310      	adds	r3, #16
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3301      	adds	r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]




  Song[noteCount].note = G4;
 8001c86:	494b      	ldr	r1, [pc, #300]	@ (8001db4 <main+0x18fc>)
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	229f      	movs	r2, #159	@ 0x9f
 8001c96:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _8th;
 8001c98:	4946      	ldr	r1, [pc, #280]	@ (8001db4 <main+0x18fc>)
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	2208      	movs	r2, #8
 8001caa:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001cac:	4941      	ldr	r1, [pc, #260]	@ (8001db4 <main+0x18fc>)
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	3308      	adds	r3, #8
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001cc0:	493c      	ldr	r1, [pc, #240]	@ (8001db4 <main+0x18fc>)
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	330c      	adds	r3, #12
 8001cd0:	220a      	movs	r2, #10
 8001cd2:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001cd4:	4937      	ldr	r1, [pc, #220]	@ (8001db4 <main+0x18fc>)
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3310      	adds	r3, #16
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3301      	adds	r3, #1
 8001cec:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C3;
 8001cee:	4931      	ldr	r1, [pc, #196]	@ (8001db4 <main+0x18fc>)
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 8001d00:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8001d02:	492c      	ldr	r1, [pc, #176]	@ (8001db4 <main+0x18fc>)
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	3304      	adds	r3, #4
 8001d12:	2210      	movs	r2, #16
 8001d14:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001d16:	4927      	ldr	r1, [pc, #156]	@ (8001db4 <main+0x18fc>)
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	3308      	adds	r3, #8
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001d2a:	4922      	ldr	r1, [pc, #136]	@ (8001db4 <main+0x18fc>)
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	330c      	adds	r3, #12
 8001d3a:	220a      	movs	r2, #10
 8001d3c:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001d3e:	491d      	ldr	r1, [pc, #116]	@ (8001db4 <main+0x18fc>)
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3310      	adds	r3, #16
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3301      	adds	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C3;
 8001d58:	4916      	ldr	r1, [pc, #88]	@ (8001db4 <main+0x18fc>)
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 8001d6a:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8001d6c:	4911      	ldr	r1, [pc, #68]	@ (8001db4 <main+0x18fc>)
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	2210      	movs	r2, #16
 8001d7e:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001d80:	490c      	ldr	r1, [pc, #48]	@ (8001db4 <main+0x18fc>)
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3308      	adds	r3, #8
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001d94:	4907      	ldr	r1, [pc, #28]	@ (8001db4 <main+0x18fc>)
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	330c      	adds	r3, #12
 8001da4:	220a      	movs	r2, #10
 8001da6:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001da8:	4902      	ldr	r1, [pc, #8]	@ (8001db4 <main+0x18fc>)
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	e001      	b.n	8001db8 <main+0x1900>
 8001db4:	200000fc 	.word	0x200000fc
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	3310      	adds	r3, #16
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]



  Song[noteCount].note = E4;
 8001dc8:	49b8      	ldr	r1, [pc, #736]	@ (80020ac <main+0x1bf4>)
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	22be      	movs	r2, #190	@ 0xbe
 8001dd8:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _8th;
 8001dda:	49b4      	ldr	r1, [pc, #720]	@ (80020ac <main+0x1bf4>)
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	440b      	add	r3, r1
 8001de8:	3304      	adds	r3, #4
 8001dea:	2208      	movs	r2, #8
 8001dec:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001dee:	49af      	ldr	r1, [pc, #700]	@ (80020ac <main+0x1bf4>)
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	3308      	adds	r3, #8
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001e02:	49aa      	ldr	r1, [pc, #680]	@ (80020ac <main+0x1bf4>)
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	330c      	adds	r3, #12
 8001e12:	220a      	movs	r2, #10
 8001e14:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001e16:	49a5      	ldr	r1, [pc, #660]	@ (80020ac <main+0x1bf4>)
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	3310      	adds	r3, #16
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C3;
 8001e30:	499e      	ldr	r1, [pc, #632]	@ (80020ac <main+0x1bf4>)
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 8001e42:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8001e44:	4999      	ldr	r1, [pc, #612]	@ (80020ac <main+0x1bf4>)
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	3304      	adds	r3, #4
 8001e54:	2210      	movs	r2, #16
 8001e56:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001e58:	4994      	ldr	r1, [pc, #592]	@ (80020ac <main+0x1bf4>)
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	3308      	adds	r3, #8
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001e6c:	498f      	ldr	r1, [pc, #572]	@ (80020ac <main+0x1bf4>)
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	330c      	adds	r3, #12
 8001e7c:	220a      	movs	r2, #10
 8001e7e:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001e80:	498a      	ldr	r1, [pc, #552]	@ (80020ac <main+0x1bf4>)
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3310      	adds	r3, #16
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3301      	adds	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]

  Song[noteCount].note = C3;
 8001e9a:	4984      	ldr	r1, [pc, #528]	@ (80020ac <main+0x1bf4>)
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 8001eac:	601a      	str	r2, [r3, #0]
  Song[noteCount].size = _16th;
 8001eae:	497f      	ldr	r1, [pc, #508]	@ (80020ac <main+0x1bf4>)
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	2210      	movs	r2, #16
 8001ec0:	601a      	str	r2, [r3, #0]
  Song[noteCount].tempo = tempoForSong;
 8001ec2:	497a      	ldr	r1, [pc, #488]	@ (80020ac <main+0x1bf4>)
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	3308      	adds	r3, #8
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	601a      	str	r2, [r3, #0]
  Song[noteCount].space = 10;
 8001ed6:	4975      	ldr	r1, [pc, #468]	@ (80020ac <main+0x1bf4>)
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	330c      	adds	r3, #12
 8001ee6:	220a      	movs	r2, #10
 8001ee8:	601a      	str	r2, [r3, #0]
  Song[noteCount].end = 0;
 8001eea:	4970      	ldr	r1, [pc, #448]	@ (80020ac <main+0x1bf4>)
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3310      	adds	r3, #16
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
  noteCount++;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3301      	adds	r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]


  Save_Note = Song[0].note;  // Needed for vibrato effect
 8001f04:	4b69      	ldr	r3, [pc, #420]	@ (80020ac <main+0x1bf4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a69      	ldr	r2, [pc, #420]	@ (80020b0 <main+0x1bf8>)
 8001f0a:	6013      	str	r3, [r2, #0]
  INDEX = 0;
 8001f0c:	4b69      	ldr	r3, [pc, #420]	@ (80020b4 <main+0x1bfc>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]

  while (1)
  {
	  int i,j;

	  Message_Pointer = &Message[0];
 8001f12:	4b69      	ldr	r3, [pc, #420]	@ (80020b8 <main+0x1c00>)
 8001f14:	4a69      	ldr	r2, [pc, #420]	@ (80020bc <main+0x1c04>)
 8001f16:	601a      	str	r2, [r3, #0]
	  Save_Pointer = &Message[0];
 8001f18:	4b69      	ldr	r3, [pc, #420]	@ (80020c0 <main+0x1c08>)
 8001f1a:	4a68      	ldr	r2, [pc, #416]	@ (80020bc <main+0x1c04>)
 8001f1c:	601a      	str	r2, [r3, #0]
	  Message_Length = sizeof(Message)/sizeof(Message[0]);
 8001f1e:	4b69      	ldr	r3, [pc, #420]	@ (80020c4 <main+0x1c0c>)
 8001f20:	2222      	movs	r2, #34	@ 0x22
 8001f22:	701a      	strb	r2, [r3, #0]
	  Delay_msec = 200;
 8001f24:	4b68      	ldr	r3, [pc, #416]	@ (80020c8 <main+0x1c10>)
 8001f26:	22c8      	movs	r2, #200	@ 0xc8
 8001f28:	601a      	str	r2, [r3, #0]
	  Animate_On = 1;
 8001f2a:	4b68      	ldr	r3, [pc, #416]	@ (80020cc <main+0x1c14>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]




	  while ((GPIOC->IDR & 1 << 10))
 8001f30:	e049      	b.n	8001fc6 <main+0x1b0e>
	  {
	  for (i=0;i<16;i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	e01e      	b.n	8001f76 <main+0x1abe>
	  {
	  GPIOD->ODR |= 1 << i;
 8001f38:	4b65      	ldr	r3, [pc, #404]	@ (80020d0 <main+0x1c18>)
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	fa01 f202 	lsl.w	r2, r1, r2
 8001f44:	4611      	mov	r1, r2
 8001f46:	4a62      	ldr	r2, [pc, #392]	@ (80020d0 <main+0x1c18>)
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	6153      	str	r3, [r2, #20]
	  if (i>0)GPIOD->ODR &= ~(1 << (i-1));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	dd0b      	ble.n	8001f6a <main+0x1ab2>
 8001f52:	4b5f      	ldr	r3, [pc, #380]	@ (80020d0 <main+0x1c18>)
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	3a01      	subs	r2, #1
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f60:	43d2      	mvns	r2, r2
 8001f62:	4611      	mov	r1, r2
 8001f64:	4a5a      	ldr	r2, [pc, #360]	@ (80020d0 <main+0x1c18>)
 8001f66:	400b      	ands	r3, r1
 8001f68:	6153      	str	r3, [r2, #20]
	  HAL_Delay(50);
 8001f6a:	2032      	movs	r0, #50	@ 0x32
 8001f6c:	f000 fdc4 	bl	8002af8 <HAL_Delay>
	  for (i=0;i<16;i++)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3301      	adds	r3, #1
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b0f      	cmp	r3, #15
 8001f7a:	dddd      	ble.n	8001f38 <main+0x1a80>
	  }
	  for (i=15;i>=0;i--)
 8001f7c:	230f      	movs	r3, #15
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	e01e      	b.n	8001fc0 <main+0x1b08>
	  	  {
		  GPIOD->ODR |= 1 << i;
 8001f82:	4b53      	ldr	r3, [pc, #332]	@ (80020d0 <main+0x1c18>)
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	2101      	movs	r1, #1
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4a4f      	ldr	r2, [pc, #316]	@ (80020d0 <main+0x1c18>)
 8001f92:	430b      	orrs	r3, r1
 8001f94:	6153      	str	r3, [r2, #20]
	  	  if (i<15)GPIOD->ODR &= ~(1 << (i+1));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b0e      	cmp	r3, #14
 8001f9a:	dc0b      	bgt.n	8001fb4 <main+0x1afc>
 8001f9c:	4b4c      	ldr	r3, [pc, #304]	@ (80020d0 <main+0x1c18>)
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	3201      	adds	r2, #1
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001faa:	43d2      	mvns	r2, r2
 8001fac:	4611      	mov	r1, r2
 8001fae:	4a48      	ldr	r2, [pc, #288]	@ (80020d0 <main+0x1c18>)
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	6153      	str	r3, [r2, #20]
	  	  HAL_Delay(50);
 8001fb4:	2032      	movs	r0, #50	@ 0x32
 8001fb6:	f000 fd9f 	bl	8002af8 <HAL_Delay>
	  for (i=15;i>=0;i--)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	dadd      	bge.n	8001f82 <main+0x1aca>
	  while ((GPIOC->IDR & 1 << 10))
 8001fc6:	4b43      	ldr	r3, [pc, #268]	@ (80020d4 <main+0x1c1c>)
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1af      	bne.n	8001f32 <main+0x1a7a>
	  	  }

	  }
	  INDEX = 0;
 8001fd2:	4b38      	ldr	r3, [pc, #224]	@ (80020b4 <main+0x1bfc>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
	  Music_ON = 1;
 8001fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80020d8 <main+0x1c20>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]


	  DIM_Enable = 1;
 8001fde:	4b3f      	ldr	r3, [pc, #252]	@ (80020dc <main+0x1c24>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
	  // Green
	  GREEN_BRT = 255;
 8001fe4:	4b3e      	ldr	r3, [pc, #248]	@ (80020e0 <main+0x1c28>)
 8001fe6:	22ff      	movs	r2, #255	@ 0xff
 8001fe8:	701a      	strb	r2, [r3, #0]
	  BLUE_BRT = 0;
 8001fea:	4b3e      	ldr	r3, [pc, #248]	@ (80020e4 <main+0x1c2c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
	  RED_BRT = 0;
 8001ff0:	4b3d      	ldr	r3, [pc, #244]	@ (80020e8 <main+0x1c30>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 8001ff6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ffa:	f000 fd7d 	bl	8002af8 <HAL_Delay>

	  // Blue
	  GREEN_BRT = 0;
 8001ffe:	4b38      	ldr	r3, [pc, #224]	@ (80020e0 <main+0x1c28>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
	  BLUE_BRT = 255;
 8002004:	4b37      	ldr	r3, [pc, #220]	@ (80020e4 <main+0x1c2c>)
 8002006:	22ff      	movs	r2, #255	@ 0xff
 8002008:	701a      	strb	r2, [r3, #0]
	  RED_BRT = 0;
 800200a:	4b37      	ldr	r3, [pc, #220]	@ (80020e8 <main+0x1c30>)
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 8002010:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002014:	f000 fd70 	bl	8002af8 <HAL_Delay>

	  // Red
	  GREEN_BRT = 0;
 8002018:	4b31      	ldr	r3, [pc, #196]	@ (80020e0 <main+0x1c28>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
	  BLUE_BRT = 0;
 800201e:	4b31      	ldr	r3, [pc, #196]	@ (80020e4 <main+0x1c2c>)
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
	  RED_BRT = 255;
 8002024:	4b30      	ldr	r3, [pc, #192]	@ (80020e8 <main+0x1c30>)
 8002026:	22ff      	movs	r2, #255	@ 0xff
 8002028:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 800202a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800202e:	f000 fd63 	bl	8002af8 <HAL_Delay>

	  // Magenta
	  GREEN_BRT = 0;
 8002032:	4b2b      	ldr	r3, [pc, #172]	@ (80020e0 <main+0x1c28>)
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
	  BLUE_BRT = 255;
 8002038:	4b2a      	ldr	r3, [pc, #168]	@ (80020e4 <main+0x1c2c>)
 800203a:	22ff      	movs	r2, #255	@ 0xff
 800203c:	701a      	strb	r2, [r3, #0]
	  RED_BRT = 255;
 800203e:	4b2a      	ldr	r3, [pc, #168]	@ (80020e8 <main+0x1c30>)
 8002040:	22ff      	movs	r2, #255	@ 0xff
 8002042:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 8002044:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002048:	f000 fd56 	bl	8002af8 <HAL_Delay>

	  // Yellow
	  GREEN_BRT = 255;
 800204c:	4b24      	ldr	r3, [pc, #144]	@ (80020e0 <main+0x1c28>)
 800204e:	22ff      	movs	r2, #255	@ 0xff
 8002050:	701a      	strb	r2, [r3, #0]
	  BLUE_BRT = 0;
 8002052:	4b24      	ldr	r3, [pc, #144]	@ (80020e4 <main+0x1c2c>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
	  RED_BRT = 255;
 8002058:	4b23      	ldr	r3, [pc, #140]	@ (80020e8 <main+0x1c30>)
 800205a:	22ff      	movs	r2, #255	@ 0xff
 800205c:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 800205e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002062:	f000 fd49 	bl	8002af8 <HAL_Delay>

	  // Cyan
	  GREEN_BRT = 255;
 8002066:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <main+0x1c28>)
 8002068:	22ff      	movs	r2, #255	@ 0xff
 800206a:	701a      	strb	r2, [r3, #0]
	  BLUE_BRT = 255;
 800206c:	4b1d      	ldr	r3, [pc, #116]	@ (80020e4 <main+0x1c2c>)
 800206e:	22ff      	movs	r2, #255	@ 0xff
 8002070:	701a      	strb	r2, [r3, #0]
	  RED_BRT = 0;
 8002072:	4b1d      	ldr	r3, [pc, #116]	@ (80020e8 <main+0x1c30>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 8002078:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800207c:	f000 fd3c 	bl	8002af8 <HAL_Delay>

	  // White
	  GREEN_BRT = 255;
 8002080:	4b17      	ldr	r3, [pc, #92]	@ (80020e0 <main+0x1c28>)
 8002082:	22ff      	movs	r2, #255	@ 0xff
 8002084:	701a      	strb	r2, [r3, #0]
	  BLUE_BRT = 255;
 8002086:	4b17      	ldr	r3, [pc, #92]	@ (80020e4 <main+0x1c2c>)
 8002088:	22ff      	movs	r2, #255	@ 0xff
 800208a:	701a      	strb	r2, [r3, #0]
	  RED_BRT = 255;
 800208c:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <main+0x1c30>)
 800208e:	22ff      	movs	r2, #255	@ 0xff
 8002090:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 8002092:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002096:	f000 fd2f 	bl	8002af8 <HAL_Delay>

	  DIM_Enable = 0;
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <main+0x1c24>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(20000);  // Delay to allow song to finish
 80020a0:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80020a4:	f000 fd28 	bl	8002af8 <HAL_Delay>
  {
 80020a8:	e733      	b.n	8001f12 <main+0x1a5a>
 80020aa:	bf00      	nop
 80020ac:	200000fc 	.word	0x200000fc
 80020b0:	200000e0 	.word	0x200000e0
 80020b4:	200000dc 	.word	0x200000dc
 80020b8:	200000ec 	.word	0x200000ec
 80020bc:	20000008 	.word	0x20000008
 80020c0:	200000f0 	.word	0x200000f0
 80020c4:	200000e9 	.word	0x200000e9
 80020c8:	200000f4 	.word	0x200000f4
 80020cc:	200000e8 	.word	0x200000e8
 80020d0:	40020c00 	.word	0x40020c00
 80020d4:	40020800 	.word	0x40020800
 80020d8:	200000d1 	.word	0x200000d1
 80020dc:	200000d0 	.word	0x200000d0
 80020e0:	200000ce 	.word	0x200000ce
 80020e4:	200000cf 	.word	0x200000cf
 80020e8:	200000cd 	.word	0x200000cd

080020ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b094      	sub	sp, #80	@ 0x50
 80020f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020f2:	f107 0320 	add.w	r3, r7, #32
 80020f6:	2230      	movs	r2, #48	@ 0x30
 80020f8:	2100      	movs	r1, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f004 f8f6 	bl	80062ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	4b28      	ldr	r3, [pc, #160]	@ (80021b8 <SystemClock_Config+0xcc>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	4a27      	ldr	r2, [pc, #156]	@ (80021b8 <SystemClock_Config+0xcc>)
 800211a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800211e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002120:	4b25      	ldr	r3, [pc, #148]	@ (80021b8 <SystemClock_Config+0xcc>)
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800212c:	2300      	movs	r3, #0
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	4b22      	ldr	r3, [pc, #136]	@ (80021bc <SystemClock_Config+0xd0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a21      	ldr	r2, [pc, #132]	@ (80021bc <SystemClock_Config+0xd0>)
 8002136:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b1f      	ldr	r3, [pc, #124]	@ (80021bc <SystemClock_Config+0xd0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002148:	2301      	movs	r3, #1
 800214a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800214c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002150:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002152:	2302      	movs	r3, #2
 8002154:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002156:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800215a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800215c:	2308      	movs	r3, #8
 800215e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002160:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002164:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002166:	2302      	movs	r3, #2
 8002168:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800216a:	2307      	movs	r3, #7
 800216c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800216e:	f107 0320 	add.w	r3, r7, #32
 8002172:	4618      	mov	r0, r3
 8002174:	f002 fd52 	bl	8004c1c <HAL_RCC_OscConfig>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800217e:	f000 f953 	bl	8002428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002182:	230f      	movs	r3, #15
 8002184:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002186:	2302      	movs	r3, #2
 8002188:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800218e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002192:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002194:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002198:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800219a:	f107 030c 	add.w	r3, r7, #12
 800219e:	2105      	movs	r1, #5
 80021a0:	4618      	mov	r0, r3
 80021a2:	f002 ffb3 	bl	800510c <HAL_RCC_ClockConfig>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80021ac:	f000 f93c 	bl	8002428 <Error_Handler>
  }
}
 80021b0:	bf00      	nop
 80021b2:	3750      	adds	r7, #80	@ 0x50
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40007000 	.word	0x40007000

080021c0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c6:	463b      	mov	r3, r7
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80021ce:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <MX_TIM7_Init+0x64>)
 80021d0:	4a15      	ldr	r2, [pc, #84]	@ (8002228 <MX_TIM7_Init+0x68>)
 80021d2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80021d4:	4b13      	ldr	r3, [pc, #76]	@ (8002224 <MX_TIM7_Init+0x64>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021da:	4b12      	ldr	r3, [pc, #72]	@ (8002224 <MX_TIM7_Init+0x64>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80021e0:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <MX_TIM7_Init+0x64>)
 80021e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021e6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <MX_TIM7_Init+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80021ee:	480d      	ldr	r0, [pc, #52]	@ (8002224 <MX_TIM7_Init+0x64>)
 80021f0:	f003 f978 	bl	80054e4 <HAL_TIM_Base_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80021fa:	f000 f915 	bl	8002428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002206:	463b      	mov	r3, r7
 8002208:	4619      	mov	r1, r3
 800220a:	4806      	ldr	r0, [pc, #24]	@ (8002224 <MX_TIM7_Init+0x64>)
 800220c:	f003 fb88 	bl	8005920 <HAL_TIMEx_MasterConfigSynchronization>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002216:	f000 f907 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000084 	.word	0x20000084
 8002228:	40001400 	.word	0x40001400

0800222c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	@ 0x30
 8002230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002232:	f107 031c 	add.w	r3, r7, #28
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	4b72      	ldr	r3, [pc, #456]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	4a71      	ldr	r2, [pc, #452]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 800224c:	f043 0310 	orr.w	r3, r3, #16
 8002250:	6313      	str	r3, [r2, #48]	@ 0x30
 8002252:	4b6f      	ldr	r3, [pc, #444]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	61bb      	str	r3, [r7, #24]
 800225c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	4b6b      	ldr	r3, [pc, #428]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	4a6a      	ldr	r2, [pc, #424]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	6313      	str	r3, [r2, #48]	@ 0x30
 800226e:	4b68      	ldr	r3, [pc, #416]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	4b64      	ldr	r3, [pc, #400]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	4a63      	ldr	r2, [pc, #396]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 8002284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002288:	6313      	str	r3, [r2, #48]	@ 0x30
 800228a:	4b61      	ldr	r3, [pc, #388]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b5d      	ldr	r3, [pc, #372]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	4a5c      	ldr	r2, [pc, #368]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	4b56      	ldr	r3, [pc, #344]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	4a55      	ldr	r2, [pc, #340]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c2:	4b53      	ldr	r3, [pc, #332]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	4b4f      	ldr	r3, [pc, #316]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	4a4e      	ldr	r2, [pc, #312]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 80022d8:	f043 0308 	orr.w	r3, r3, #8
 80022dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022de:	4b4c      	ldr	r3, [pc, #304]	@ (8002410 <MX_GPIO_Init+0x1e4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2108      	movs	r1, #8
 80022ee:	4849      	ldr	r0, [pc, #292]	@ (8002414 <MX_GPIO_Init+0x1e8>)
 80022f0:	f000 fed4 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80022f4:	2201      	movs	r2, #1
 80022f6:	2101      	movs	r1, #1
 80022f8:	4847      	ldr	r0, [pc, #284]	@ (8002418 <MX_GPIO_Init+0x1ec>)
 80022fa:	f000 fecf 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80022fe:	2200      	movs	r2, #0
 8002300:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8002304:	4845      	ldr	r0, [pc, #276]	@ (800241c <MX_GPIO_Init+0x1f0>)
 8002306:	f000 fec9 	bl	800309c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800230a:	2308      	movs	r3, #8
 800230c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230e:	2301      	movs	r3, #1
 8002310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800231a:	f107 031c 	add.w	r3, r7, #28
 800231e:	4619      	mov	r1, r3
 8002320:	483c      	ldr	r0, [pc, #240]	@ (8002414 <MX_GPIO_Init+0x1e8>)
 8002322:	f000 fd1f 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002326:	2301      	movs	r3, #1
 8002328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232a:	2301      	movs	r3, #1
 800232c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002336:	f107 031c 	add.w	r3, r7, #28
 800233a:	4619      	mov	r1, r3
 800233c:	4836      	ldr	r0, [pc, #216]	@ (8002418 <MX_GPIO_Init+0x1ec>)
 800233e:	f000 fd11 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002342:	2308      	movs	r3, #8
 8002344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002352:	2305      	movs	r3, #5
 8002354:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	4619      	mov	r1, r3
 800235c:	482e      	ldr	r0, [pc, #184]	@ (8002418 <MX_GPIO_Init+0x1ec>)
 800235e:	f000 fd01 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002362:	2301      	movs	r3, #1
 8002364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002366:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800236a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	4619      	mov	r1, r3
 8002376:	482a      	ldr	r0, [pc, #168]	@ (8002420 <MX_GPIO_Init+0x1f4>)
 8002378:	f000 fcf4 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800237c:	2304      	movs	r3, #4
 800237e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	4619      	mov	r1, r3
 800238e:	4825      	ldr	r0, [pc, #148]	@ (8002424 <MX_GPIO_Init+0x1f8>)
 8002390:	f000 fce8 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023a6:	2305      	movs	r3, #5
 80023a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80023aa:	f107 031c 	add.w	r3, r7, #28
 80023ae:	4619      	mov	r1, r3
 80023b0:	481c      	ldr	r0, [pc, #112]	@ (8002424 <MX_GPIO_Init+0x1f8>)
 80023b2:	f000 fcd7 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80023b6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80023ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023bc:	2301      	movs	r3, #1
 80023be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	4619      	mov	r1, r3
 80023ce:	4813      	ldr	r0, [pc, #76]	@ (800241c <MX_GPIO_Init+0x1f0>)
 80023d0:	f000 fcc8 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80023d4:	2320      	movs	r3, #32
 80023d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d8:	2300      	movs	r3, #0
 80023da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	4619      	mov	r1, r3
 80023e6:	480d      	ldr	r0, [pc, #52]	@ (800241c <MX_GPIO_Init+0x1f0>)
 80023e8:	f000 fcbc 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80023ec:	2302      	movs	r3, #2
 80023ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80023f0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80023f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80023fa:	f107 031c 	add.w	r3, r7, #28
 80023fe:	4619      	mov	r1, r3
 8002400:	4804      	ldr	r0, [pc, #16]	@ (8002414 <MX_GPIO_Init+0x1e8>)
 8002402:	f000 fcaf 	bl	8002d64 <HAL_GPIO_Init>

}
 8002406:	bf00      	nop
 8002408:	3730      	adds	r7, #48	@ 0x30
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	40021000 	.word	0x40021000
 8002418:	40020800 	.word	0x40020800
 800241c:	40020c00 	.word	0x40020c00
 8002420:	40020000 	.word	0x40020000
 8002424:	40020400 	.word	0x40020400

08002428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800242c:	b672      	cpsid	i
}
 800242e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <Error_Handler+0x8>

08002434 <Seven_Segment_Digit>:
		(0x6D),(0x78),(0x3E),(0x62),(0x2A),(0x64),(0x6E),
		(0x5B),(0x80),(0x48),(0x01),(0x02),(0x04),(0x08),
		(0x10),(0x20),(0x40),(0x00)};

void Seven_Segment_Digit (unsigned char digit, unsigned char hex_char, unsigned char dot)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	71fb      	strb	r3, [r7, #7]
 800243e:	460b      	mov	r3, r1
 8002440:	71bb      	strb	r3, [r7, #6]
 8002442:	4613      	mov	r3, r2
 8002444:	717b      	strb	r3, [r7, #5]
/*******************************************************************************
Code to mask and bit shift 0-7 value of digit and 0-15 value of hex_char
to output correct bit pattern to GPIO_Output
*******************************************************************************/
	// Set selected digit to 0, all others high, and output 7 segment pattern
	GPIOE->ODR = (0xFF00 | _7SEG[hex_char]) & ~(1<<(digit+8));
 8002446:	79bb      	ldrb	r3, [r7, #6]
 8002448:	4a10      	ldr	r2, [pc, #64]	@ (800248c <Seven_Segment_Digit+0x58>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	f443 427f 	orr.w	r2, r3, #65280	@ 0xff00
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	3308      	adds	r3, #8
 8002454:	2101      	movs	r1, #1
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	401a      	ands	r2, r3
 800245e:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <Seven_Segment_Digit+0x5c>)
 8002460:	615a      	str	r2, [r3, #20]
	if (dot > 0) GPIOE->ODR &= ~(1<<7); // Set dot segment to 0 if dot is on
 8002462:	797b      	ldrb	r3, [r7, #5]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <Seven_Segment_Digit+0x40>
 8002468:	4b09      	ldr	r3, [pc, #36]	@ (8002490 <Seven_Segment_Digit+0x5c>)
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	4a08      	ldr	r2, [pc, #32]	@ (8002490 <Seven_Segment_Digit+0x5c>)
 800246e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002472:	6153      	str	r3, [r2, #20]


	// Set all selects high to latch-in character
	GPIOE->ODR |= 0xFF00;
 8002474:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <Seven_Segment_Digit+0x5c>)
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	4a05      	ldr	r2, [pc, #20]	@ (8002490 <Seven_Segment_Digit+0x5c>)
 800247a:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 800247e:	6153      	str	r3, [r2, #20]
	return;
 8002480:	bf00      	nop
}
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	2000002c 	.word	0x2000002c
 8002490:	40021000 	.word	0x40021000

08002494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <HAL_MspInit+0x4c>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	4a0f      	ldr	r2, [pc, #60]	@ (80024e0 <HAL_MspInit+0x4c>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024aa:	4b0d      	ldr	r3, [pc, #52]	@ (80024e0 <HAL_MspInit+0x4c>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <HAL_MspInit+0x4c>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	4a08      	ldr	r2, [pc, #32]	@ (80024e0 <HAL_MspInit+0x4c>)
 80024c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024c6:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <HAL_MspInit+0x4c>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024d2:	2007      	movs	r0, #7
 80024d4:	f000 fc04 	bl	8002ce0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800

080024e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0e      	ldr	r2, [pc, #56]	@ (800252c <HAL_TIM_Base_MspInit+0x48>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d115      	bne.n	8002522 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002530 <HAL_TIM_Base_MspInit+0x4c>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002530 <HAL_TIM_Base_MspInit+0x4c>)
 8002500:	f043 0320 	orr.w	r3, r3, #32
 8002504:	6413      	str	r3, [r2, #64]	@ 0x40
 8002506:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <HAL_TIM_Base_MspInit+0x4c>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	2037      	movs	r0, #55	@ 0x37
 8002518:	f000 fbed 	bl	8002cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800251c:	2037      	movs	r0, #55	@ 0x37
 800251e:	f000 fc06 	bl	8002d2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40001400 	.word	0x40001400
 8002530:	40023800 	.word	0x40023800

08002534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <NMI_Handler+0x4>

0800253c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <HardFault_Handler+0x4>

08002544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <MemManage_Handler+0x4>

0800254c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <BusFault_Handler+0x4>

08002554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <UsageFault_Handler+0x4>

0800255c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

COUNT++;  // Increment note duration counter
 800258c:	4b60      	ldr	r3, [pc, #384]	@ (8002710 <SysTick_Handler+0x188>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	4a5f      	ldr	r2, [pc, #380]	@ (8002710 <SysTick_Handler+0x188>)
 8002594:	6013      	str	r3, [r2, #0]
Vibrato_Count++; // Increment the note vibrato effect counter
 8002596:	4b5f      	ldr	r3, [pc, #380]	@ (8002714 <SysTick_Handler+0x18c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	3301      	adds	r3, #1
 800259c:	4a5d      	ldr	r2, [pc, #372]	@ (8002714 <SysTick_Handler+0x18c>)
 800259e:	6013      	str	r3, [r2, #0]

/* This code applies vibrato to the current note that is playing  */
if (Vibrato_Count >= Vibrato_Rate)
 80025a0:	4b5c      	ldr	r3, [pc, #368]	@ (8002714 <SysTick_Handler+0x18c>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b5c      	ldr	r3, [pc, #368]	@ (8002718 <SysTick_Handler+0x190>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	db40      	blt.n	800262e <SysTick_Handler+0xa6>
{
	Vibrato_Count = 0;
 80025ac:	4b59      	ldr	r3, [pc, #356]	@ (8002714 <SysTick_Handler+0x18c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
	if (Song[INDEX].note > 0)
 80025b2:	4b5a      	ldr	r3, [pc, #360]	@ (800271c <SysTick_Handler+0x194>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	495a      	ldr	r1, [pc, #360]	@ (8002720 <SysTick_Handler+0x198>)
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	dd32      	ble.n	800262e <SysTick_Handler+0xa6>
		{
			Song[INDEX].note += Vibrato_Depth;
 80025c8:	4b54      	ldr	r3, [pc, #336]	@ (800271c <SysTick_Handler+0x194>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4954      	ldr	r1, [pc, #336]	@ (8002720 <SysTick_Handler+0x198>)
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	4b52      	ldr	r3, [pc, #328]	@ (8002724 <SysTick_Handler+0x19c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a4f      	ldr	r2, [pc, #316]	@ (800271c <SysTick_Handler+0x194>)
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	4419      	add	r1, r3
 80025e4:	484e      	ldr	r0, [pc, #312]	@ (8002720 <SysTick_Handler+0x198>)
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4403      	add	r3, r0
 80025f0:	6019      	str	r1, [r3, #0]
			if (Song[INDEX].note > (Save_Note + Vibrato_Depth)) Song[INDEX].note = Save_Note - Vibrato_Depth;
 80025f2:	4b4a      	ldr	r3, [pc, #296]	@ (800271c <SysTick_Handler+0x194>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	494a      	ldr	r1, [pc, #296]	@ (8002720 <SysTick_Handler+0x198>)
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b48      	ldr	r3, [pc, #288]	@ (8002728 <SysTick_Handler+0x1a0>)
 8002606:	6819      	ldr	r1, [r3, #0]
 8002608:	4b46      	ldr	r3, [pc, #280]	@ (8002724 <SysTick_Handler+0x19c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	440b      	add	r3, r1
 800260e:	429a      	cmp	r2, r3
 8002610:	dd0d      	ble.n	800262e <SysTick_Handler+0xa6>
 8002612:	4b45      	ldr	r3, [pc, #276]	@ (8002728 <SysTick_Handler+0x1a0>)
 8002614:	6819      	ldr	r1, [r3, #0]
 8002616:	4b43      	ldr	r3, [pc, #268]	@ (8002724 <SysTick_Handler+0x19c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a40      	ldr	r2, [pc, #256]	@ (800271c <SysTick_Handler+0x194>)
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	1ac9      	subs	r1, r1, r3
 8002620:	483f      	ldr	r0, [pc, #252]	@ (8002720 <SysTick_Handler+0x198>)
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4403      	add	r3, r0
 800262c:	6019      	str	r1, [r3, #0]

		}
}

if (Animate_On > 0)
 800262e:	4b3f      	ldr	r3, [pc, #252]	@ (800272c <SysTick_Handler+0x1a4>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d067      	beq.n	8002706 <SysTick_Handler+0x17e>
{
	Delay_counter++;
 8002636:	4b3e      	ldr	r3, [pc, #248]	@ (8002730 <SysTick_Handler+0x1a8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3301      	adds	r3, #1
 800263c:	4a3c      	ldr	r2, [pc, #240]	@ (8002730 <SysTick_Handler+0x1a8>)
 800263e:	6013      	str	r3, [r2, #0]
	if (Delay_counter > Delay_msec)
 8002640:	4b3b      	ldr	r3, [pc, #236]	@ (8002730 <SysTick_Handler+0x1a8>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b3b      	ldr	r3, [pc, #236]	@ (8002734 <SysTick_Handler+0x1ac>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	dd5c      	ble.n	8002706 <SysTick_Handler+0x17e>
	{
		Delay_counter = 0;
 800264c:	4b38      	ldr	r3, [pc, #224]	@ (8002730 <SysTick_Handler+0x1a8>)
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
		Seven_Segment_Digit(7,*(Message_Pointer),0);
 8002652:	4b39      	ldr	r3, [pc, #228]	@ (8002738 <SysTick_Handler+0x1b0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2200      	movs	r2, #0
 800265a:	4619      	mov	r1, r3
 800265c:	2007      	movs	r0, #7
 800265e:	f7ff fee9 	bl	8002434 <Seven_Segment_Digit>
		Seven_Segment_Digit(6,*(Message_Pointer+1),0);
 8002662:	4b35      	ldr	r3, [pc, #212]	@ (8002738 <SysTick_Handler+0x1b0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2200      	movs	r2, #0
 800266c:	4619      	mov	r1, r3
 800266e:	2006      	movs	r0, #6
 8002670:	f7ff fee0 	bl	8002434 <Seven_Segment_Digit>
		Seven_Segment_Digit(5,*(Message_Pointer+2),0);
 8002674:	4b30      	ldr	r3, [pc, #192]	@ (8002738 <SysTick_Handler+0x1b0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3302      	adds	r3, #2
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2200      	movs	r2, #0
 800267e:	4619      	mov	r1, r3
 8002680:	2005      	movs	r0, #5
 8002682:	f7ff fed7 	bl	8002434 <Seven_Segment_Digit>
		Seven_Segment_Digit(4,*(Message_Pointer+3),0);
 8002686:	4b2c      	ldr	r3, [pc, #176]	@ (8002738 <SysTick_Handler+0x1b0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3303      	adds	r3, #3
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	4619      	mov	r1, r3
 8002692:	2004      	movs	r0, #4
 8002694:	f7ff fece 	bl	8002434 <Seven_Segment_Digit>
		Seven_Segment_Digit(3,*(Message_Pointer+4),0);
 8002698:	4b27      	ldr	r3, [pc, #156]	@ (8002738 <SysTick_Handler+0x1b0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	3304      	adds	r3, #4
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2200      	movs	r2, #0
 80026a2:	4619      	mov	r1, r3
 80026a4:	2003      	movs	r0, #3
 80026a6:	f7ff fec5 	bl	8002434 <Seven_Segment_Digit>
		Seven_Segment_Digit(2,*(Message_Pointer+5),0);
 80026aa:	4b23      	ldr	r3, [pc, #140]	@ (8002738 <SysTick_Handler+0x1b0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3305      	adds	r3, #5
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2200      	movs	r2, #0
 80026b4:	4619      	mov	r1, r3
 80026b6:	2002      	movs	r0, #2
 80026b8:	f7ff febc 	bl	8002434 <Seven_Segment_Digit>
		Seven_Segment_Digit(1,*(Message_Pointer+6),0);
 80026bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002738 <SysTick_Handler+0x1b0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3306      	adds	r3, #6
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	4619      	mov	r1, r3
 80026c8:	2001      	movs	r0, #1
 80026ca:	f7ff feb3 	bl	8002434 <Seven_Segment_Digit>
		Seven_Segment_Digit(0,*(Message_Pointer+7),0);
 80026ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <SysTick_Handler+0x1b0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3307      	adds	r3, #7
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2200      	movs	r2, #0
 80026d8:	4619      	mov	r1, r3
 80026da:	2000      	movs	r0, #0
 80026dc:	f7ff feaa 	bl	8002434 <Seven_Segment_Digit>
		Message_Pointer++;
 80026e0:	4b15      	ldr	r3, [pc, #84]	@ (8002738 <SysTick_Handler+0x1b0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	3301      	adds	r3, #1
 80026e6:	4a14      	ldr	r2, [pc, #80]	@ (8002738 <SysTick_Handler+0x1b0>)
 80026e8:	6013      	str	r3, [r2, #0]
		if ((Message_Pointer - Save_Pointer) >= (Message_Length-8)) Message_Pointer = Save_Pointer;
 80026ea:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <SysTick_Handler+0x1b0>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4b13      	ldr	r3, [pc, #76]	@ (800273c <SysTick_Handler+0x1b4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	1ad2      	subs	r2, r2, r3
 80026f4:	4b12      	ldr	r3, [pc, #72]	@ (8002740 <SysTick_Handler+0x1b8>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	3b08      	subs	r3, #8
 80026fa:	429a      	cmp	r2, r3
 80026fc:	db03      	blt.n	8002706 <SysTick_Handler+0x17e>
 80026fe:	4b0f      	ldr	r3, [pc, #60]	@ (800273c <SysTick_Handler+0x1b4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a0d      	ldr	r2, [pc, #52]	@ (8002738 <SysTick_Handler+0x1b0>)
 8002704:	6013      	str	r3, [r2, #0]

	}
}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002706:	f000 f9d7 	bl	8002ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	200000d8 	.word	0x200000d8
 8002714:	200000e4 	.word	0x200000e4
 8002718:	20000004 	.word	0x20000004
 800271c:	200000dc 	.word	0x200000dc
 8002720:	200000fc 	.word	0x200000fc
 8002724:	20000000 	.word	0x20000000
 8002728:	200000e0 	.word	0x200000e0
 800272c:	200000e8 	.word	0x200000e8
 8002730:	200000f8 	.word	0x200000f8
 8002734:	200000f4 	.word	0x200000f4
 8002738:	200000ec 	.word	0x200000ec
 800273c:	200000f0 	.word	0x200000f0
 8002740:	200000e9 	.word	0x200000e9

08002744 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

	/* Increment TONE counter and dimming ramp counter */
	TONE++;
 8002748:	4b82      	ldr	r3, [pc, #520]	@ (8002954 <TIM7_IRQHandler+0x210>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3301      	adds	r3, #1
 800274e:	4a81      	ldr	r2, [pc, #516]	@ (8002954 <TIM7_IRQHandler+0x210>)
 8002750:	6013      	str	r3, [r2, #0]
	ramp++;
 8002752:	4b81      	ldr	r3, [pc, #516]	@ (8002958 <TIM7_IRQHandler+0x214>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	3301      	adds	r3, #1
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b7f      	ldr	r3, [pc, #508]	@ (8002958 <TIM7_IRQHandler+0x214>)
 800275c:	701a      	strb	r2, [r3, #0]

	/* This code plays the song from the song array structure */
	if ((Music_ON > 0) && (Song[INDEX].note > 0) && ((Song[INDEX].tempo/Song[INDEX].size - Song[INDEX].space) > COUNT))
 800275e:	4b7f      	ldr	r3, [pc, #508]	@ (800295c <TIM7_IRQHandler+0x218>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d046      	beq.n	80027f4 <TIM7_IRQHandler+0xb0>
 8002766:	4b7e      	ldr	r3, [pc, #504]	@ (8002960 <TIM7_IRQHandler+0x21c>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	497e      	ldr	r1, [pc, #504]	@ (8002964 <TIM7_IRQHandler+0x220>)
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	dd3b      	ble.n	80027f4 <TIM7_IRQHandler+0xb0>
 800277c:	4b78      	ldr	r3, [pc, #480]	@ (8002960 <TIM7_IRQHandler+0x21c>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4978      	ldr	r1, [pc, #480]	@ (8002964 <TIM7_IRQHandler+0x220>)
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	3308      	adds	r3, #8
 800278e:	6819      	ldr	r1, [r3, #0]
 8002790:	4b73      	ldr	r3, [pc, #460]	@ (8002960 <TIM7_IRQHandler+0x21c>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4873      	ldr	r0, [pc, #460]	@ (8002964 <TIM7_IRQHandler+0x220>)
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4403      	add	r3, r0
 80027a0:	3304      	adds	r3, #4
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	fb91 f1f3 	sdiv	r1, r1, r3
 80027a8:	4b6d      	ldr	r3, [pc, #436]	@ (8002960 <TIM7_IRQHandler+0x21c>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	486d      	ldr	r0, [pc, #436]	@ (8002964 <TIM7_IRQHandler+0x220>)
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4403      	add	r3, r0
 80027b8:	330c      	adds	r3, #12
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	1aca      	subs	r2, r1, r3
 80027be:	4b6a      	ldr	r3, [pc, #424]	@ (8002968 <TIM7_IRQHandler+0x224>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	dd16      	ble.n	80027f4 <TIM7_IRQHandler+0xb0>
	{

		if (Song[INDEX].note <= TONE)
 80027c6:	4b66      	ldr	r3, [pc, #408]	@ (8002960 <TIM7_IRQHandler+0x21c>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4966      	ldr	r1, [pc, #408]	@ (8002964 <TIM7_IRQHandler+0x220>)
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002954 <TIM7_IRQHandler+0x210>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	dc76      	bgt.n	80028ce <TIM7_IRQHandler+0x18a>
		{
			GPIOD->ODR ^= 1;
 80027e0:	4b62      	ldr	r3, [pc, #392]	@ (800296c <TIM7_IRQHandler+0x228>)
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	4a61      	ldr	r2, [pc, #388]	@ (800296c <TIM7_IRQHandler+0x228>)
 80027e6:	f083 0301 	eor.w	r3, r3, #1
 80027ea:	6153      	str	r3, [r2, #20]
			TONE = 0;
 80027ec:	4b59      	ldr	r3, [pc, #356]	@ (8002954 <TIM7_IRQHandler+0x210>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
		if (Song[INDEX].note <= TONE)
 80027f2:	e06c      	b.n	80028ce <TIM7_IRQHandler+0x18a>
		}
	}
	else if ((Music_ON > 0) && Song[INDEX].tempo/Song[INDEX].size > COUNT)
 80027f4:	4b59      	ldr	r3, [pc, #356]	@ (800295c <TIM7_IRQHandler+0x218>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01d      	beq.n	8002838 <TIM7_IRQHandler+0xf4>
 80027fc:	4b58      	ldr	r3, [pc, #352]	@ (8002960 <TIM7_IRQHandler+0x21c>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4958      	ldr	r1, [pc, #352]	@ (8002964 <TIM7_IRQHandler+0x220>)
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3308      	adds	r3, #8
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	4b53      	ldr	r3, [pc, #332]	@ (8002960 <TIM7_IRQHandler+0x21c>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4853      	ldr	r0, [pc, #332]	@ (8002964 <TIM7_IRQHandler+0x220>)
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4403      	add	r3, r0
 8002820:	3304      	adds	r3, #4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	fb91 f2f3 	sdiv	r2, r1, r3
 8002828:	4b4f      	ldr	r3, [pc, #316]	@ (8002968 <TIM7_IRQHandler+0x224>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	dd03      	ble.n	8002838 <TIM7_IRQHandler+0xf4>
	{
		TONE = 0;
 8002830:	4b48      	ldr	r3, [pc, #288]	@ (8002954 <TIM7_IRQHandler+0x210>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e04a      	b.n	80028ce <TIM7_IRQHandler+0x18a>
	}
	else if ((Music_ON > 0) && Song[INDEX].tempo/Song[INDEX].size == COUNT)
 8002838:	4b48      	ldr	r3, [pc, #288]	@ (800295c <TIM7_IRQHandler+0x218>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d03c      	beq.n	80028ba <TIM7_IRQHandler+0x176>
 8002840:	4b47      	ldr	r3, [pc, #284]	@ (8002960 <TIM7_IRQHandler+0x21c>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4947      	ldr	r1, [pc, #284]	@ (8002964 <TIM7_IRQHandler+0x220>)
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	3308      	adds	r3, #8
 8002852:	6819      	ldr	r1, [r3, #0]
 8002854:	4b42      	ldr	r3, [pc, #264]	@ (8002960 <TIM7_IRQHandler+0x21c>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4842      	ldr	r0, [pc, #264]	@ (8002964 <TIM7_IRQHandler+0x220>)
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4403      	add	r3, r0
 8002864:	3304      	adds	r3, #4
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	fb91 f2f3 	sdiv	r2, r1, r3
 800286c:	4b3e      	ldr	r3, [pc, #248]	@ (8002968 <TIM7_IRQHandler+0x224>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d122      	bne.n	80028ba <TIM7_IRQHandler+0x176>
	{
		COUNT = 0;
 8002874:	4b3c      	ldr	r3, [pc, #240]	@ (8002968 <TIM7_IRQHandler+0x224>)
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
		TONE = 0;
 800287a:	4b36      	ldr	r3, [pc, #216]	@ (8002954 <TIM7_IRQHandler+0x210>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
		if (!(Song[INDEX].end))
 8002880:	4b37      	ldr	r3, [pc, #220]	@ (8002960 <TIM7_IRQHandler+0x21c>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4937      	ldr	r1, [pc, #220]	@ (8002964 <TIM7_IRQHandler+0x220>)
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	3310      	adds	r3, #16
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d11a      	bne.n	80028ce <TIM7_IRQHandler+0x18a>
				{
					INDEX++;
 8002898:	4b31      	ldr	r3, [pc, #196]	@ (8002960 <TIM7_IRQHandler+0x21c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	4a30      	ldr	r2, [pc, #192]	@ (8002960 <TIM7_IRQHandler+0x21c>)
 80028a0:	6013      	str	r3, [r2, #0]
					Save_Note = Song[INDEX].note;
 80028a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002960 <TIM7_IRQHandler+0x21c>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	492f      	ldr	r1, [pc, #188]	@ (8002964 <TIM7_IRQHandler+0x220>)
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002970 <TIM7_IRQHandler+0x22c>)
 80028b6:	6013      	str	r3, [r2, #0]
		if (!(Song[INDEX].end))
 80028b8:	e009      	b.n	80028ce <TIM7_IRQHandler+0x18a>
				}
	}
	else if (Music_ON == 0)
 80028ba:	4b28      	ldr	r3, [pc, #160]	@ (800295c <TIM7_IRQHandler+0x218>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <TIM7_IRQHandler+0x18a>
		{
			TONE = 0;
 80028c2:	4b24      	ldr	r3, [pc, #144]	@ (8002954 <TIM7_IRQHandler+0x210>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
			COUNT = 0;
 80028c8:	4b27      	ldr	r3, [pc, #156]	@ (8002968 <TIM7_IRQHandler+0x224>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
		}


	/* This code dims the RGB LEDs using PWM */
	if (DIM_Enable > 0)
 80028ce:	4b29      	ldr	r3, [pc, #164]	@ (8002974 <TIM7_IRQHandler+0x230>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d038      	beq.n	8002948 <TIM7_IRQHandler+0x204>
	{
		if (RED_BRT <= ramp)
 80028d6:	4b28      	ldr	r3, [pc, #160]	@ (8002978 <TIM7_IRQHandler+0x234>)
 80028d8:	781a      	ldrb	r2, [r3, #0]
 80028da:	4b1f      	ldr	r3, [pc, #124]	@ (8002958 <TIM7_IRQHandler+0x214>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d806      	bhi.n	80028f0 <TIM7_IRQHandler+0x1ac>
		{
			GPIOD->ODR |= (1 << 15);
 80028e2:	4b22      	ldr	r3, [pc, #136]	@ (800296c <TIM7_IRQHandler+0x228>)
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	4a21      	ldr	r2, [pc, #132]	@ (800296c <TIM7_IRQHandler+0x228>)
 80028e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028ec:	6153      	str	r3, [r2, #20]
 80028ee:	e005      	b.n	80028fc <TIM7_IRQHandler+0x1b8>
		}
		else
		{
			GPIOD->ODR &= ~(1 << 15);
 80028f0:	4b1e      	ldr	r3, [pc, #120]	@ (800296c <TIM7_IRQHandler+0x228>)
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	4a1d      	ldr	r2, [pc, #116]	@ (800296c <TIM7_IRQHandler+0x228>)
 80028f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80028fa:	6153      	str	r3, [r2, #20]
		}
		if (BLUE_BRT <= ramp)
 80028fc:	4b1f      	ldr	r3, [pc, #124]	@ (800297c <TIM7_IRQHandler+0x238>)
 80028fe:	781a      	ldrb	r2, [r3, #0]
 8002900:	4b15      	ldr	r3, [pc, #84]	@ (8002958 <TIM7_IRQHandler+0x214>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d806      	bhi.n	8002916 <TIM7_IRQHandler+0x1d2>
		{
			GPIOD->ODR |= (1 << 14);
 8002908:	4b18      	ldr	r3, [pc, #96]	@ (800296c <TIM7_IRQHandler+0x228>)
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	4a17      	ldr	r2, [pc, #92]	@ (800296c <TIM7_IRQHandler+0x228>)
 800290e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002912:	6153      	str	r3, [r2, #20]
 8002914:	e005      	b.n	8002922 <TIM7_IRQHandler+0x1de>
		}
		else
		{
			GPIOD->ODR &= ~(1 << 14);
 8002916:	4b15      	ldr	r3, [pc, #84]	@ (800296c <TIM7_IRQHandler+0x228>)
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	4a14      	ldr	r2, [pc, #80]	@ (800296c <TIM7_IRQHandler+0x228>)
 800291c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002920:	6153      	str	r3, [r2, #20]
		}
		if (GREEN_BRT <= ramp)
 8002922:	4b17      	ldr	r3, [pc, #92]	@ (8002980 <TIM7_IRQHandler+0x23c>)
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <TIM7_IRQHandler+0x214>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d806      	bhi.n	800293c <TIM7_IRQHandler+0x1f8>
		{
			GPIOD->ODR |= (1 << 13);
 800292e:	4b0f      	ldr	r3, [pc, #60]	@ (800296c <TIM7_IRQHandler+0x228>)
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	4a0e      	ldr	r2, [pc, #56]	@ (800296c <TIM7_IRQHandler+0x228>)
 8002934:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002938:	6153      	str	r3, [r2, #20]
 800293a:	e005      	b.n	8002948 <TIM7_IRQHandler+0x204>
		}
		else
		{
			GPIOD->ODR &= ~(1 << 13);
 800293c:	4b0b      	ldr	r3, [pc, #44]	@ (800296c <TIM7_IRQHandler+0x228>)
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	4a0a      	ldr	r2, [pc, #40]	@ (800296c <TIM7_IRQHandler+0x228>)
 8002942:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002946:	6153      	str	r3, [r2, #20]
		}
	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002948:	480e      	ldr	r0, [pc, #56]	@ (8002984 <TIM7_IRQHandler+0x240>)
 800294a:	f002 fe1a 	bl	8005582 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200000d4 	.word	0x200000d4
 8002958:	200000cc 	.word	0x200000cc
 800295c:	200000d1 	.word	0x200000d1
 8002960:	200000dc 	.word	0x200000dc
 8002964:	200000fc 	.word	0x200000fc
 8002968:	200000d8 	.word	0x200000d8
 800296c:	40020c00 	.word	0x40020c00
 8002970:	200000e0 	.word	0x200000e0
 8002974:	200000d0 	.word	0x200000d0
 8002978:	200000cd 	.word	0x200000cd
 800297c:	200000cf 	.word	0x200000cf
 8002980:	200000ce 	.word	0x200000ce
 8002984:	20000084 	.word	0x20000084

08002988 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800298c:	4802      	ldr	r0, [pc, #8]	@ (8002998 <OTG_FS_IRQHandler+0x10>)
 800298e:	f000 fb9e 	bl	80030ce <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20001618 	.word	0x20001618

0800299c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029a0:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <SystemInit+0x20>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a6:	4a05      	ldr	r2, [pc, #20]	@ (80029bc <SystemInit+0x20>)
 80029a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80029c4:	f7ff ffea 	bl	800299c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029c8:	480c      	ldr	r0, [pc, #48]	@ (80029fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029ca:	490d      	ldr	r1, [pc, #52]	@ (8002a00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d0:	e002      	b.n	80029d8 <LoopCopyDataInit>

080029d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029d6:	3304      	adds	r3, #4

080029d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029dc:	d3f9      	bcc.n	80029d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029de:	4a0a      	ldr	r2, [pc, #40]	@ (8002a08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029e0:	4c0a      	ldr	r4, [pc, #40]	@ (8002a0c <LoopFillZerobss+0x22>)
  movs r3, #0
 80029e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e4:	e001      	b.n	80029ea <LoopFillZerobss>

080029e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e8:	3204      	adds	r2, #4

080029ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029ec:	d3fb      	bcc.n	80029e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ee:	f003 fc85 	bl	80062fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029f2:	f7fd fd61 	bl	80004b8 <main>
  bx  lr    
 80029f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a00:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002a04:	0800637c 	.word	0x0800637c
  ldr r2, =_sbss
 8002a08:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002a0c:	200019f8 	.word	0x200019f8

08002a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a10:	e7fe      	b.n	8002a10 <ADC_IRQHandler>
	...

08002a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a18:	4b0e      	ldr	r3, [pc, #56]	@ (8002a54 <HAL_Init+0x40>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a54 <HAL_Init+0x40>)
 8002a1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a24:	4b0b      	ldr	r3, [pc, #44]	@ (8002a54 <HAL_Init+0x40>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	@ (8002a54 <HAL_Init+0x40>)
 8002a2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a30:	4b08      	ldr	r3, [pc, #32]	@ (8002a54 <HAL_Init+0x40>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a07      	ldr	r2, [pc, #28]	@ (8002a54 <HAL_Init+0x40>)
 8002a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	f000 f94f 	bl	8002ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a42:	2000      	movs	r0, #0
 8002a44:	f000 f808 	bl	8002a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a48:	f7ff fd24 	bl	8002494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023c00 	.word	0x40023c00

08002a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a60:	4b12      	ldr	r3, [pc, #72]	@ (8002aac <HAL_InitTick+0x54>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b12      	ldr	r3, [pc, #72]	@ (8002ab0 <HAL_InitTick+0x58>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 f967 	bl	8002d4a <HAL_SYSTICK_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e00e      	b.n	8002aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b0f      	cmp	r3, #15
 8002a8a:	d80a      	bhi.n	8002aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295
 8002a94:	f000 f92f 	bl	8002cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a98:	4a06      	ldr	r2, [pc, #24]	@ (8002ab4 <HAL_InitTick+0x5c>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e000      	b.n	8002aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	2000005c 	.word	0x2000005c
 8002ab0:	20000064 	.word	0x20000064
 8002ab4:	20000060 	.word	0x20000060

08002ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002abc:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_IncTick+0x20>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_IncTick+0x24>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4a04      	ldr	r2, [pc, #16]	@ (8002adc <HAL_IncTick+0x24>)
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000064 	.word	0x20000064
 8002adc:	20001614 	.word	0x20001614

08002ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	@ (8002af4 <HAL_GetTick+0x14>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	20001614 	.word	0x20001614

08002af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b00:	f7ff ffee 	bl	8002ae0 <HAL_GetTick>
 8002b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b10:	d005      	beq.n	8002b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b12:	4b0a      	ldr	r3, [pc, #40]	@ (8002b3c <HAL_Delay+0x44>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b1e:	bf00      	nop
 8002b20:	f7ff ffde 	bl	8002ae0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d8f7      	bhi.n	8002b20 <HAL_Delay+0x28>
  {
  }
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000064 	.word	0x20000064

08002b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b50:	4b0c      	ldr	r3, [pc, #48]	@ (8002b84 <__NVIC_SetPriorityGrouping+0x44>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b72:	4a04      	ldr	r2, [pc, #16]	@ (8002b84 <__NVIC_SetPriorityGrouping+0x44>)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	60d3      	str	r3, [r2, #12]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	0a1b      	lsrs	r3, r3, #8
 8002b92:	f003 0307 	and.w	r3, r3, #7
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	db0b      	blt.n	8002bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	4907      	ldr	r1, [pc, #28]	@ (8002bdc <__NVIC_EnableIRQ+0x38>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000e100 	.word	0xe000e100

08002be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	6039      	str	r1, [r7, #0]
 8002bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	db0a      	blt.n	8002c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	490c      	ldr	r1, [pc, #48]	@ (8002c2c <__NVIC_SetPriority+0x4c>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	0112      	lsls	r2, r2, #4
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	440b      	add	r3, r1
 8002c04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c08:	e00a      	b.n	8002c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4908      	ldr	r1, [pc, #32]	@ (8002c30 <__NVIC_SetPriority+0x50>)
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	3b04      	subs	r3, #4
 8002c18:	0112      	lsls	r2, r2, #4
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	761a      	strb	r2, [r3, #24]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000e100 	.word	0xe000e100
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	@ 0x24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f1c3 0307 	rsb	r3, r3, #7
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	bf28      	it	cs
 8002c52:	2304      	movcs	r3, #4
 8002c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d902      	bls.n	8002c64 <NVIC_EncodePriority+0x30>
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3b03      	subs	r3, #3
 8002c62:	e000      	b.n	8002c66 <NVIC_EncodePriority+0x32>
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43da      	mvns	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	401a      	ands	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	fa01 f303 	lsl.w	r3, r1, r3
 8002c86:	43d9      	mvns	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	4313      	orrs	r3, r2
         );
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3724      	adds	r7, #36	@ 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cac:	d301      	bcc.n	8002cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e00f      	b.n	8002cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002cdc <SysTick_Config+0x40>)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cba:	210f      	movs	r1, #15
 8002cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc0:	f7ff ff8e 	bl	8002be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc4:	4b05      	ldr	r3, [pc, #20]	@ (8002cdc <SysTick_Config+0x40>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cca:	4b04      	ldr	r3, [pc, #16]	@ (8002cdc <SysTick_Config+0x40>)
 8002ccc:	2207      	movs	r2, #7
 8002cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	e000e010 	.word	0xe000e010

08002ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ff29 	bl	8002b40 <__NVIC_SetPriorityGrouping>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d08:	f7ff ff3e 	bl	8002b88 <__NVIC_GetPriorityGrouping>
 8002d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f7ff ff8e 	bl	8002c34 <NVIC_EncodePriority>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff5d 	bl	8002be0 <__NVIC_SetPriority>
}
 8002d26:	bf00      	nop
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	4603      	mov	r3, r0
 8002d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff31 	bl	8002ba4 <__NVIC_EnableIRQ>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff ffa2 	bl	8002c9c <SysTick_Config>
 8002d58:	4603      	mov	r3, r0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b089      	sub	sp, #36	@ 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	e16b      	b.n	8003058 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d80:	2201      	movs	r2, #1
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	f040 815a 	bne.w	8003052 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d005      	beq.n	8002db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d130      	bne.n	8002e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dec:	2201      	movs	r2, #1
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 0201 	and.w	r2, r3, #1
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d017      	beq.n	8002e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	2203      	movs	r2, #3
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d123      	bne.n	8002ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	08da      	lsrs	r2, r3, #3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3208      	adds	r2, #8
 8002e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	220f      	movs	r2, #15
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	08da      	lsrs	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3208      	adds	r2, #8
 8002ea2:	69b9      	ldr	r1, [r7, #24]
 8002ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0203 	and.w	r2, r3, #3
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80b4 	beq.w	8003052 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	4b60      	ldr	r3, [pc, #384]	@ (8003070 <HAL_GPIO_Init+0x30c>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef2:	4a5f      	ldr	r2, [pc, #380]	@ (8003070 <HAL_GPIO_Init+0x30c>)
 8002ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002efa:	4b5d      	ldr	r3, [pc, #372]	@ (8003070 <HAL_GPIO_Init+0x30c>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f06:	4a5b      	ldr	r2, [pc, #364]	@ (8003074 <HAL_GPIO_Init+0x310>)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	089b      	lsrs	r3, r3, #2
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	220f      	movs	r2, #15
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a52      	ldr	r2, [pc, #328]	@ (8003078 <HAL_GPIO_Init+0x314>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d02b      	beq.n	8002f8a <HAL_GPIO_Init+0x226>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a51      	ldr	r2, [pc, #324]	@ (800307c <HAL_GPIO_Init+0x318>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d025      	beq.n	8002f86 <HAL_GPIO_Init+0x222>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a50      	ldr	r2, [pc, #320]	@ (8003080 <HAL_GPIO_Init+0x31c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d01f      	beq.n	8002f82 <HAL_GPIO_Init+0x21e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a4f      	ldr	r2, [pc, #316]	@ (8003084 <HAL_GPIO_Init+0x320>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d019      	beq.n	8002f7e <HAL_GPIO_Init+0x21a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a4e      	ldr	r2, [pc, #312]	@ (8003088 <HAL_GPIO_Init+0x324>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d013      	beq.n	8002f7a <HAL_GPIO_Init+0x216>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a4d      	ldr	r2, [pc, #308]	@ (800308c <HAL_GPIO_Init+0x328>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00d      	beq.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a4c      	ldr	r2, [pc, #304]	@ (8003090 <HAL_GPIO_Init+0x32c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d007      	beq.n	8002f72 <HAL_GPIO_Init+0x20e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a4b      	ldr	r2, [pc, #300]	@ (8003094 <HAL_GPIO_Init+0x330>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d101      	bne.n	8002f6e <HAL_GPIO_Init+0x20a>
 8002f6a:	2307      	movs	r3, #7
 8002f6c:	e00e      	b.n	8002f8c <HAL_GPIO_Init+0x228>
 8002f6e:	2308      	movs	r3, #8
 8002f70:	e00c      	b.n	8002f8c <HAL_GPIO_Init+0x228>
 8002f72:	2306      	movs	r3, #6
 8002f74:	e00a      	b.n	8002f8c <HAL_GPIO_Init+0x228>
 8002f76:	2305      	movs	r3, #5
 8002f78:	e008      	b.n	8002f8c <HAL_GPIO_Init+0x228>
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	e006      	b.n	8002f8c <HAL_GPIO_Init+0x228>
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e004      	b.n	8002f8c <HAL_GPIO_Init+0x228>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e002      	b.n	8002f8c <HAL_GPIO_Init+0x228>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_GPIO_Init+0x228>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	69fa      	ldr	r2, [r7, #28]
 8002f8e:	f002 0203 	and.w	r2, r2, #3
 8002f92:	0092      	lsls	r2, r2, #2
 8002f94:	4093      	lsls	r3, r2
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f9c:	4935      	ldr	r1, [pc, #212]	@ (8003074 <HAL_GPIO_Init+0x310>)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	3302      	adds	r3, #2
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002faa:	4b3b      	ldr	r3, [pc, #236]	@ (8003098 <HAL_GPIO_Init+0x334>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fce:	4a32      	ldr	r2, [pc, #200]	@ (8003098 <HAL_GPIO_Init+0x334>)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd4:	4b30      	ldr	r3, [pc, #192]	@ (8003098 <HAL_GPIO_Init+0x334>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ff8:	4a27      	ldr	r2, [pc, #156]	@ (8003098 <HAL_GPIO_Init+0x334>)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ffe:	4b26      	ldr	r3, [pc, #152]	@ (8003098 <HAL_GPIO_Init+0x334>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003022:	4a1d      	ldr	r2, [pc, #116]	@ (8003098 <HAL_GPIO_Init+0x334>)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003028:	4b1b      	ldr	r3, [pc, #108]	@ (8003098 <HAL_GPIO_Init+0x334>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800304c:	4a12      	ldr	r2, [pc, #72]	@ (8003098 <HAL_GPIO_Init+0x334>)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	3301      	adds	r3, #1
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	2b0f      	cmp	r3, #15
 800305c:	f67f ae90 	bls.w	8002d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	3724      	adds	r7, #36	@ 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	40013800 	.word	0x40013800
 8003078:	40020000 	.word	0x40020000
 800307c:	40020400 	.word	0x40020400
 8003080:	40020800 	.word	0x40020800
 8003084:	40020c00 	.word	0x40020c00
 8003088:	40021000 	.word	0x40021000
 800308c:	40021400 	.word	0x40021400
 8003090:	40021800 	.word	0x40021800
 8003094:	40021c00 	.word	0x40021c00
 8003098:	40013c00 	.word	0x40013c00

0800309c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
 80030a8:	4613      	mov	r3, r2
 80030aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030b8:	e003      	b.n	80030c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	041a      	lsls	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	619a      	str	r2, [r3, #24]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b086      	sub	sp, #24
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f002 fdb9 	bl	8005c5c <USB_GetMode>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	f040 80fb 	bne.w	80032e8 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f002 fd7c 	bl	8005bf4 <USB_ReadInterrupts>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80f1 	beq.w	80032e6 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f002 fd73 	bl	8005bf4 <USB_ReadInterrupts>
 800310e:	4603      	mov	r3, r0
 8003110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003114:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003118:	d104      	bne.n	8003124 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003122:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f002 fd63 	bl	8005bf4 <USB_ReadInterrupts>
 800312e:	4603      	mov	r3, r0
 8003130:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003134:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003138:	d104      	bne.n	8003144 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003142:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f002 fd53 	bl	8005bf4 <USB_ReadInterrupts>
 800314e:	4603      	mov	r3, r0
 8003150:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003154:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003158:	d104      	bne.n	8003164 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003162:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f002 fd43 	bl	8005bf4 <USB_ReadInterrupts>
 800316e:	4603      	mov	r3, r0
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b02      	cmp	r3, #2
 8003176:	d103      	bne.n	8003180 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2202      	movs	r2, #2
 800317e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f002 fd35 	bl	8005bf4 <USB_ReadInterrupts>
 800318a:	4603      	mov	r3, r0
 800318c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003194:	d120      	bne.n	80031d8 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800319e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d113      	bne.n	80031d8 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80031b0:	2110      	movs	r1, #16
 80031b2:	6938      	ldr	r0, [r7, #16]
 80031b4:	f002 fc66 	bl	8005a84 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80031b8:	6938      	ldr	r0, [r7, #16]
 80031ba:	f002 fc95 	bl	8005ae8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	7a5b      	ldrb	r3, [r3, #9]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d105      	bne.n	80031d2 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2101      	movs	r1, #1
 80031cc:	4618      	mov	r0, r3
 80031ce:	f002 fd53 	bl	8005c78 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f003 f80b 	bl	80061ee <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f002 fd09 	bl	8005bf4 <USB_ReadInterrupts>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031ec:	d102      	bne.n	80031f4 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f001 fca1 	bl	8004b36 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f002 fcfb 	bl	8005bf4 <USB_ReadInterrupts>
 80031fe:	4603      	mov	r3, r0
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b08      	cmp	r3, #8
 8003206:	d106      	bne.n	8003216 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f002 ffd4 	bl	80061b6 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2208      	movs	r2, #8
 8003214:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f002 fcea 	bl	8005bf4 <USB_ReadInterrupts>
 8003220:	4603      	mov	r3, r0
 8003222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003226:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800322a:	d139      	bne.n	80032a0 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f002 fd5e 	bl	8005cf2 <USB_HC_ReadInterrupt>
 8003236:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e025      	b.n	800328a <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	fa22 f303 	lsr.w	r3, r2, r3
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d018      	beq.n	8003284 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003268:	d106      	bne.n	8003278 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	4619      	mov	r1, r3
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f859 	bl	8003328 <HCD_HC_IN_IRQHandler>
 8003276:	e005      	b.n	8003284 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	4619      	mov	r1, r3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 febb 	bl	8003ffa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3301      	adds	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	795b      	ldrb	r3, [r3, #5]
 800328e:	461a      	mov	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	4293      	cmp	r3, r2
 8003294:	d3d3      	bcc.n	800323e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800329e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f002 fca5 	bl	8005bf4 <USB_ReadInterrupts>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d101      	bne.n	80032b8 <HAL_HCD_IRQHandler+0x1ea>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <HAL_HCD_IRQHandler+0x1ec>
 80032b8:	2300      	movs	r3, #0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d014      	beq.n	80032e8 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699a      	ldr	r2, [r3, #24]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0210 	bic.w	r2, r2, #16
 80032cc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f001 fb52 	bl	8004978 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0210 	orr.w	r2, r2, #16
 80032e2:	619a      	str	r2, [r3, #24]
 80032e4:	e000      	b.n	80032e8 <HAL_HCD_IRQHandler+0x21a>
      return;
 80032e6:	bf00      	nop
    }
  }
}
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_HCD_Stop+0x16>
 8003300:	2302      	movs	r3, #2
 8003302:	e00d      	b.n	8003320 <HAL_HCD_Stop+0x32>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f002 fe1f 	bl	8005f54 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f002 fc67 	bl	8005c1a <USB_ReadChInterrupts>
 800334c:	4603      	mov	r3, r0
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b04      	cmp	r3, #4
 8003354:	d11a      	bne.n	800338c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4413      	add	r3, r2
 800335e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003362:	461a      	mov	r2, r3
 8003364:	2304      	movs	r3, #4
 8003366:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	334d      	adds	r3, #77	@ 0x4d
 8003378:	2207      	movs	r2, #7
 800337a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f002 fcc5 	bl	8005d14 <USB_HC_Halt>
 800338a:	e09e      	b.n	80034ca <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f002 fc40 	bl	8005c1a <USB_ReadChInterrupts>
 800339a:	4603      	mov	r3, r0
 800339c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033a4:	d11b      	bne.n	80033de <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b2:	461a      	mov	r2, r3
 80033b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	334d      	adds	r3, #77	@ 0x4d
 80033ca:	2208      	movs	r2, #8
 80033cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f002 fc9c 	bl	8005d14 <USB_HC_Halt>
 80033dc:	e075      	b.n	80034ca <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	4611      	mov	r1, r2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f002 fc17 	bl	8005c1a <USB_ReadChInterrupts>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d11a      	bne.n	800342c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003402:	461a      	mov	r2, r3
 8003404:	2308      	movs	r3, #8
 8003406:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	334d      	adds	r3, #77	@ 0x4d
 8003418:	2206      	movs	r2, #6
 800341a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f002 fc75 	bl	8005d14 <USB_HC_Halt>
 800342a:	e04e      	b.n	80034ca <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f002 fbf0 	bl	8005c1a <USB_ReadChInterrupts>
 800343a:	4603      	mov	r3, r0
 800343c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003444:	d11b      	bne.n	800347e <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003452:	461a      	mov	r2, r3
 8003454:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003458:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	334d      	adds	r3, #77	@ 0x4d
 800346a:	2209      	movs	r2, #9
 800346c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f002 fc4c 	bl	8005d14 <USB_HC_Halt>
 800347c:	e025      	b.n	80034ca <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	4611      	mov	r1, r2
 8003486:	4618      	mov	r0, r3
 8003488:	f002 fbc7 	bl	8005c1a <USB_ReadChInterrupts>
 800348c:	4603      	mov	r3, r0
 800348e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003492:	2b80      	cmp	r3, #128	@ 0x80
 8003494:	d119      	bne.n	80034ca <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003496:	78fb      	ldrb	r3, [r7, #3]
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4413      	add	r3, r2
 800349e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034a2:	461a      	mov	r2, r3
 80034a4:	2380      	movs	r3, #128	@ 0x80
 80034a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	334d      	adds	r3, #77	@ 0x4d
 80034b8:	2207      	movs	r2, #7
 80034ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f002 fc25 	bl	8005d14 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f002 fba1 	bl	8005c1a <USB_ReadChInterrupts>
 80034d8:	4603      	mov	r3, r0
 80034da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034e2:	d112      	bne.n	800350a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	4611      	mov	r1, r2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f002 fc11 	bl	8005d14 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034fe:	461a      	mov	r2, r3
 8003500:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003504:	6093      	str	r3, [r2, #8]
 8003506:	f000 bd75 	b.w	8003ff4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f002 fb81 	bl	8005c1a <USB_ReadChInterrupts>
 8003518:	4603      	mov	r3, r0
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	f040 8128 	bne.w	8003774 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4413      	add	r3, r2
 800352c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003530:	461a      	mov	r2, r3
 8003532:	2320      	movs	r3, #32
 8003534:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003536:	78fa      	ldrb	r2, [r7, #3]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	331b      	adds	r3, #27
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d119      	bne.n	8003580 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	331b      	adds	r3, #27
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	0151      	lsls	r1, r2, #5
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	440a      	add	r2, r1
 8003576:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800357a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800357e:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	799b      	ldrb	r3, [r3, #6]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01b      	beq.n	80035c0 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3330      	adds	r3, #48	@ 0x30
 8003598:	6819      	ldr	r1, [r3, #0]
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	1ac9      	subs	r1, r1, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4403      	add	r3, r0
 80035bc:	3338      	adds	r3, #56	@ 0x38
 80035be:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80035c0:	78fa      	ldrb	r2, [r7, #3]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	334d      	adds	r3, #77	@ 0x4d
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	3344      	adds	r3, #68	@ 0x44
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f4:	461a      	mov	r2, r3
 80035f6:	2301      	movs	r3, #1
 80035f8:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	3326      	adds	r3, #38	@ 0x26
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	3326      	adds	r3, #38	@ 0x26
 8003620:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003622:	2b02      	cmp	r3, #2
 8003624:	d110      	bne.n	8003648 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	78fa      	ldrb	r2, [r7, #3]
 800362c:	4611      	mov	r1, r2
 800362e:	4618      	mov	r0, r3
 8003630:	f002 fb70 	bl	8005d14 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4413      	add	r3, r2
 800363c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003640:	461a      	mov	r2, r3
 8003642:	2310      	movs	r3, #16
 8003644:	6093      	str	r3, [r2, #8]
 8003646:	e03d      	b.n	80036c4 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	3326      	adds	r3, #38	@ 0x26
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b03      	cmp	r3, #3
 800365c:	d00a      	beq.n	8003674 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	3326      	adds	r3, #38	@ 0x26
 800366e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003670:	2b01      	cmp	r3, #1
 8003672:	d127      	bne.n	80036c4 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	78fa      	ldrb	r2, [r7, #3]
 8003684:	0151      	lsls	r1, r2, #5
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	440a      	add	r2, r1
 800368a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800368e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003692:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	334c      	adds	r3, #76	@ 0x4c
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	334c      	adds	r3, #76	@ 0x4c
 80036b8:	781a      	ldrb	r2, [r3, #0]
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	4619      	mov	r1, r3
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f002 fda3 	bl	800620a <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	799b      	ldrb	r3, [r3, #6]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d13b      	bne.n	8003744 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	3338      	adds	r3, #56	@ 0x38
 80036dc:	6819      	ldr	r1, [r3, #0]
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4403      	add	r3, r0
 80036ec:	3328      	adds	r3, #40	@ 0x28
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	440b      	add	r3, r1
 80036f2:	1e59      	subs	r1, r3, #1
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4403      	add	r3, r0
 8003702:	3328      	adds	r3, #40	@ 0x28
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	fbb1 f3f3 	udiv	r3, r1, r3
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8470 	beq.w	8003ff4 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	333c      	adds	r3, #60	@ 0x3c
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	f083 0301 	eor.w	r3, r3, #1
 800372c:	b2d8      	uxtb	r0, r3
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	333c      	adds	r3, #60	@ 0x3c
 800373c:	4602      	mov	r2, r0
 800373e:	701a      	strb	r2, [r3, #0]
 8003740:	f000 bc58 	b.w	8003ff4 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003744:	78fa      	ldrb	r2, [r7, #3]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	333c      	adds	r3, #60	@ 0x3c
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	f083 0301 	eor.w	r3, r3, #1
 800375c:	b2d8      	uxtb	r0, r3
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	333c      	adds	r3, #60	@ 0x3c
 800376c:	4602      	mov	r2, r0
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	f000 bc40 	b.w	8003ff4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f002 fa4c 	bl	8005c1a <USB_ReadChInterrupts>
 8003782:	4603      	mov	r3, r0
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b20      	cmp	r3, #32
 800378a:	d131      	bne.n	80037f0 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4413      	add	r3, r2
 8003794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003798:	461a      	mov	r2, r3
 800379a:	2320      	movs	r3, #32
 800379c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	331a      	adds	r3, #26
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	f040 841f 	bne.w	8003ff4 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	331b      	adds	r3, #27
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	334d      	adds	r3, #77	@ 0x4d
 80037da:	2203      	movs	r2, #3
 80037dc:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f002 fa94 	bl	8005d14 <USB_HC_Halt>
 80037ec:	f000 bc02 	b.w	8003ff4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f002 fa0e 	bl	8005c1a <USB_ReadChInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b02      	cmp	r3, #2
 8003806:	f040 8305 	bne.w	8003e14 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4413      	add	r3, r2
 8003812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003816:	461a      	mov	r2, r3
 8003818:	2302      	movs	r3, #2
 800381a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	334d      	adds	r3, #77	@ 0x4d
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d114      	bne.n	800385c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	334d      	adds	r3, #77	@ 0x4d
 8003842:	2202      	movs	r2, #2
 8003844:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	334c      	adds	r3, #76	@ 0x4c
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e2cc      	b.n	8003df6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800385c:	78fa      	ldrb	r2, [r7, #3]
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	4613      	mov	r3, r2
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	1a9b      	subs	r3, r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	334d      	adds	r3, #77	@ 0x4d
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b06      	cmp	r3, #6
 8003870:	d114      	bne.n	800389c <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	334d      	adds	r3, #77	@ 0x4d
 8003882:	2202      	movs	r2, #2
 8003884:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	334c      	adds	r3, #76	@ 0x4c
 8003896:	2205      	movs	r2, #5
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	e2ac      	b.n	8003df6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	334d      	adds	r3, #77	@ 0x4d
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b07      	cmp	r3, #7
 80038b0:	d00b      	beq.n	80038ca <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	334d      	adds	r3, #77	@ 0x4d
 80038c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80038c4:	2b09      	cmp	r3, #9
 80038c6:	f040 80a6 	bne.w	8003a16 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	334d      	adds	r3, #77	@ 0x4d
 80038da:	2202      	movs	r2, #2
 80038dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	3344      	adds	r3, #68	@ 0x44
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	1c59      	adds	r1, r3, #1
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4403      	add	r3, r0
 80038fe:	3344      	adds	r3, #68	@ 0x44
 8003900:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	3344      	adds	r3, #68	@ 0x44
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d943      	bls.n	80039a0 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	3344      	adds	r3, #68	@ 0x44
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800392c:	78fa      	ldrb	r2, [r7, #3]
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	331a      	adds	r3, #26
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d123      	bne.n	800398a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	331b      	adds	r3, #27
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003956:	78fa      	ldrb	r2, [r7, #3]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	331c      	adds	r3, #28
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4413      	add	r3, r2
 8003972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	0151      	lsls	r1, r2, #5
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	440a      	add	r2, r1
 8003980:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003988:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	334c      	adds	r3, #76	@ 0x4c
 800399a:	2204      	movs	r2, #4
 800399c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800399e:	e229      	b.n	8003df4 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	334c      	adds	r3, #76	@ 0x4c
 80039b0:	2202      	movs	r2, #2
 80039b2:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	3326      	adds	r3, #38	@ 0x26
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00b      	beq.n	80039e2 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	3326      	adds	r3, #38	@ 0x26
 80039da:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039dc:	2b02      	cmp	r3, #2
 80039de:	f040 8209 	bne.w	8003df4 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039f8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a00:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a14:	e1ee      	b.n	8003df4 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	334d      	adds	r3, #77	@ 0x4d
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	f040 80c8 	bne.w	8003bbe <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	334d      	adds	r3, #77	@ 0x4d
 8003a3e:	2202      	movs	r2, #2
 8003a40:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	331b      	adds	r3, #27
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	f040 81ce 	bne.w	8003df6 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	3326      	adds	r3, #38	@ 0x26
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d16b      	bne.n	8003b48 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	3348      	adds	r3, #72	@ 0x48
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	1c59      	adds	r1, r3, #1
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4403      	add	r3, r0
 8003a90:	3348      	adds	r3, #72	@ 0x48
 8003a92:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3348      	adds	r3, #72	@ 0x48
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d943      	bls.n	8003b32 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	3348      	adds	r3, #72	@ 0x48
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	331b      	adds	r3, #27
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	3344      	adds	r3, #68	@ 0x44
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d809      	bhi.n	8003afc <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	331c      	adds	r3, #28
 8003af8:	2201      	movs	r2, #1
 8003afa:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	0151      	lsls	r1, r2, #5
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	440a      	add	r2, r1
 8003b12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b1a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	334c      	adds	r3, #76	@ 0x4c
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	701a      	strb	r2, [r3, #0]
 8003b30:	e014      	b.n	8003b5c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	334c      	adds	r3, #76	@ 0x4c
 8003b42:	2202      	movs	r2, #2
 8003b44:	701a      	strb	r2, [r3, #0]
 8003b46:	e009      	b.n	8003b5c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	334c      	adds	r3, #76	@ 0x4c
 8003b58:	2202      	movs	r2, #2
 8003b5a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b5c:	78fa      	ldrb	r2, [r7, #3]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	3326      	adds	r3, #38	@ 0x26
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	3326      	adds	r3, #38	@ 0x26
 8003b82:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	f040 8136 	bne.w	8003df6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ba0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ba8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	e11b      	b.n	8003df6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	334d      	adds	r3, #77	@ 0x4d
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	f040 8081 	bne.w	8003cd8 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bd6:	78fa      	ldrb	r2, [r7, #3]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	334d      	adds	r3, #77	@ 0x4d
 8003be6:	2202      	movs	r2, #2
 8003be8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	331b      	adds	r3, #27
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	f040 80fa 	bne.w	8003df6 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	334c      	adds	r3, #76	@ 0x4c
 8003c12:	2202      	movs	r2, #2
 8003c14:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	0151      	lsls	r1, r2, #5
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	440a      	add	r2, r1
 8003c2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c34:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	0151      	lsls	r1, r2, #5
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	440a      	add	r2, r1
 8003c4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c54:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003c56:	78fb      	ldrb	r3, [r7, #3]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c70:	f023 0320 	bic.w	r3, r3, #32
 8003c74:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	3326      	adds	r3, #38	@ 0x26
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	3326      	adds	r3, #38	@ 0x26
 8003c9c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	f040 80a9 	bne.w	8003df6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003cba:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cc2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e08e      	b.n	8003df6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003cd8:	78fa      	ldrb	r2, [r7, #3]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	334d      	adds	r3, #77	@ 0x4d
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d143      	bne.n	8003d76 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	1a9b      	subs	r3, r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	334d      	adds	r3, #77	@ 0x4d
 8003cfe:	2202      	movs	r2, #2
 8003d00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	334c      	adds	r3, #76	@ 0x4c
 8003d12:	2202      	movs	r2, #2
 8003d14:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	3326      	adds	r3, #38	@ 0x26
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d2c:	78fa      	ldrb	r2, [r7, #3]
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	3326      	adds	r3, #38	@ 0x26
 8003d3c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d159      	bne.n	8003df6 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d58:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d60:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	e03f      	b.n	8003df6 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	334d      	adds	r3, #77	@ 0x4d
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d126      	bne.n	8003dda <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d8c:	78fa      	ldrb	r2, [r7, #3]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	334d      	adds	r3, #77	@ 0x4d
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	3344      	adds	r3, #68	@ 0x44
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	1c59      	adds	r1, r3, #1
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4403      	add	r3, r0
 8003dc0:	3344      	adds	r3, #68	@ 0x44
 8003dc2:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003dc4:	78fa      	ldrb	r2, [r7, #3]
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	334c      	adds	r3, #76	@ 0x4c
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	701a      	strb	r2, [r3, #0]
 8003dd8:	e00d      	b.n	8003df6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	334d      	adds	r3, #77	@ 0x4d
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	f000 8100 	beq.w	8003ff2 <HCD_HC_IN_IRQHandler+0xcca>
 8003df2:	e000      	b.n	8003df6 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003df4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	334c      	adds	r3, #76	@ 0x4c
 8003e06:	781a      	ldrb	r2, [r3, #0]
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f002 f9fc 	bl	800620a <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e12:	e0ef      	b.n	8003ff4 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	78fa      	ldrb	r2, [r7, #3]
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f001 fefc 	bl	8005c1a <USB_ReadChInterrupts>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e28:	2b40      	cmp	r3, #64	@ 0x40
 8003e2a:	d12f      	bne.n	8003e8c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2340      	movs	r3, #64	@ 0x40
 8003e3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003e3e:	78fa      	ldrb	r2, [r7, #3]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	1a9b      	subs	r3, r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	334d      	adds	r3, #77	@ 0x4d
 8003e4e:	2205      	movs	r2, #5
 8003e50:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	331a      	adds	r3, #26
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d109      	bne.n	8003e7c <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	3344      	adds	r3, #68	@ 0x44
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f001 ff45 	bl	8005d14 <USB_HC_Halt>
 8003e8a:	e0b3      	b.n	8003ff4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f001 fec0 	bl	8005c1a <USB_ReadChInterrupts>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	f040 80a7 	bne.w	8003ff4 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	3326      	adds	r3, #38	@ 0x26
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d11b      	bne.n	8003ef4 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ebc:	78fa      	ldrb	r2, [r7, #3]
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	3344      	adds	r3, #68	@ 0x44
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	334d      	adds	r3, #77	@ 0x4d
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	4611      	mov	r1, r2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f001 ff11 	bl	8005d14 <USB_HC_Halt>
 8003ef2:	e03f      	b.n	8003f74 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	3326      	adds	r3, #38	@ 0x26
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	3326      	adds	r3, #38	@ 0x26
 8003f1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d129      	bne.n	8003f74 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3344      	adds	r3, #68	@ 0x44
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	799b      	ldrb	r3, [r3, #6]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HCD_HC_IN_IRQHandler+0xc2a>
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	331b      	adds	r3, #27
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d110      	bne.n	8003f74 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	334d      	adds	r3, #77	@ 0x4d
 8003f62:	2204      	movs	r2, #4
 8003f64:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f001 fed0 	bl	8005d14 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003f74:	78fa      	ldrb	r2, [r7, #3]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	331b      	adds	r3, #27
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d129      	bne.n	8003fde <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	331b      	adds	r3, #27
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	78fa      	ldrb	r2, [r7, #3]
 8003fae:	0151      	lsls	r1, r2, #5
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	440a      	add	r2, r1
 8003fb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003fb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fbc:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	0151      	lsls	r1, r2, #5
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	440a      	add	r2, r1
 8003fd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003fd8:	f043 0320 	orr.w	r3, r3, #32
 8003fdc:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fea:	461a      	mov	r2, r3
 8003fec:	2310      	movs	r3, #16
 8003fee:	6093      	str	r3, [r2, #8]
 8003ff0:	e000      	b.n	8003ff4 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003ff2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f001 fdfe 	bl	8005c1a <USB_ReadChInterrupts>
 800401e:	4603      	mov	r3, r0
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b04      	cmp	r3, #4
 8004026:	d11b      	bne.n	8004060 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004034:	461a      	mov	r2, r3
 8004036:	2304      	movs	r3, #4
 8004038:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800403a:	78fa      	ldrb	r2, [r7, #3]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	334d      	adds	r3, #77	@ 0x4d
 800404a:	2207      	movs	r2, #7
 800404c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	4611      	mov	r1, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f001 fe5c 	bl	8005d14 <USB_HC_Halt>
 800405c:	f000 bc89 	b.w	8004972 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	4611      	mov	r1, r2
 8004068:	4618      	mov	r0, r3
 800406a:	f001 fdd6 	bl	8005c1a <USB_ReadChInterrupts>
 800406e:	4603      	mov	r3, r0
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b20      	cmp	r3, #32
 8004076:	f040 8082 	bne.w	800417e <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4413      	add	r3, r2
 8004082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004086:	461a      	mov	r2, r3
 8004088:	2320      	movs	r3, #32
 800408a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	3319      	adds	r3, #25
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d124      	bne.n	80040ec <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80040a2:	78fa      	ldrb	r2, [r7, #3]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	3319      	adds	r3, #25
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	334c      	adds	r3, #76	@ 0x4c
 80040c6:	2202      	movs	r2, #2
 80040c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80040ca:	78fa      	ldrb	r2, [r7, #3]
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	334d      	adds	r3, #77	@ 0x4d
 80040da:	2203      	movs	r2, #3
 80040dc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	4611      	mov	r1, r2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 fe14 	bl	8005d14 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80040ec:	78fa      	ldrb	r2, [r7, #3]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	331a      	adds	r3, #26
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	f040 8437 	bne.w	8004972 <HCD_HC_OUT_IRQHandler+0x978>
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	331b      	adds	r3, #27
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	f040 842b 	bne.w	8004972 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	3326      	adds	r3, #38	@ 0x26
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d009      	beq.n	8004146 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004132:	78fa      	ldrb	r2, [r7, #3]
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	331b      	adds	r3, #27
 8004142:	2201      	movs	r2, #1
 8004144:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	334d      	adds	r3, #77	@ 0x4d
 8004156:	2203      	movs	r2, #3
 8004158:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	78fa      	ldrb	r2, [r7, #3]
 8004160:	4611      	mov	r1, r2
 8004162:	4618      	mov	r0, r3
 8004164:	f001 fdd6 	bl	8005d14 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	3344      	adds	r3, #68	@ 0x44
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e3f9      	b.n	8004972 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	78fa      	ldrb	r2, [r7, #3]
 8004184:	4611      	mov	r1, r2
 8004186:	4618      	mov	r0, r3
 8004188:	f001 fd47 	bl	8005c1a <USB_ReadChInterrupts>
 800418c:	4603      	mov	r3, r0
 800418e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004196:	d111      	bne.n	80041bc <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041a4:	461a      	mov	r2, r3
 80041a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041aa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 fdad 	bl	8005d14 <USB_HC_Halt>
 80041ba:	e3da      	b.n	8004972 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	4611      	mov	r1, r2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 fd28 	bl	8005c1a <USB_ReadChInterrupts>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d168      	bne.n	80042a6 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80041d4:	78fa      	ldrb	r2, [r7, #3]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	3344      	adds	r3, #68	@ 0x44
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	4611      	mov	r1, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f001 fd12 	bl	8005c1a <USB_ReadChInterrupts>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fc:	2b40      	cmp	r3, #64	@ 0x40
 80041fe:	d112      	bne.n	8004226 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	3319      	adds	r3, #25
 8004210:	2201      	movs	r2, #1
 8004212:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4413      	add	r3, r2
 800421c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004220:	461a      	mov	r2, r3
 8004222:	2340      	movs	r3, #64	@ 0x40
 8004224:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	331b      	adds	r3, #27
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d019      	beq.n	8004270 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800423c:	78fa      	ldrb	r2, [r7, #3]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	331b      	adds	r3, #27
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4413      	add	r3, r2
 8004258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	0151      	lsls	r1, r2, #5
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	440a      	add	r2, r1
 8004266:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800426a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800426e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800427c:	461a      	mov	r2, r3
 800427e:	2301      	movs	r3, #1
 8004280:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004282:	78fa      	ldrb	r2, [r7, #3]
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	334d      	adds	r3, #77	@ 0x4d
 8004292:	2201      	movs	r2, #1
 8004294:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	4611      	mov	r1, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f001 fd38 	bl	8005d14 <USB_HC_Halt>
 80042a4:	e365      	b.n	8004972 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f001 fcb3 	bl	8005c1a <USB_ReadChInterrupts>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ba:	2b40      	cmp	r3, #64	@ 0x40
 80042bc:	d139      	bne.n	8004332 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	334d      	adds	r3, #77	@ 0x4d
 80042ce:	2205      	movs	r2, #5
 80042d0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80042d2:	78fa      	ldrb	r2, [r7, #3]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	331a      	adds	r3, #26
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	3319      	adds	r3, #25
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	3344      	adds	r3, #68	@ 0x44
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f001 fcfb 	bl	8005d14 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4413      	add	r3, r2
 8004326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800432a:	461a      	mov	r2, r3
 800432c:	2340      	movs	r3, #64	@ 0x40
 800432e:	6093      	str	r3, [r2, #8]
 8004330:	e31f      	b.n	8004972 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	4611      	mov	r1, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f001 fc6d 	bl	8005c1a <USB_ReadChInterrupts>
 8004340:	4603      	mov	r3, r0
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b08      	cmp	r3, #8
 8004348:	d11a      	bne.n	8004380 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4413      	add	r3, r2
 8004352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004356:	461a      	mov	r2, r3
 8004358:	2308      	movs	r3, #8
 800435a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800435c:	78fa      	ldrb	r2, [r7, #3]
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	4613      	mov	r3, r2
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	1a9b      	subs	r3, r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	334d      	adds	r3, #77	@ 0x4d
 800436c:	2206      	movs	r2, #6
 800436e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	78fa      	ldrb	r2, [r7, #3]
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f001 fccb 	bl	8005d14 <USB_HC_Halt>
 800437e:	e2f8      	b.n	8004972 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f001 fc46 	bl	8005c1a <USB_ReadChInterrupts>
 800438e:	4603      	mov	r3, r0
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b10      	cmp	r3, #16
 8004396:	d144      	bne.n	8004422 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	3344      	adds	r3, #68	@ 0x44
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	334d      	adds	r3, #77	@ 0x4d
 80043bc:	2204      	movs	r2, #4
 80043be:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80043c0:	78fa      	ldrb	r2, [r7, #3]
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	3319      	adds	r3, #25
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d114      	bne.n	8004400 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	3318      	adds	r3, #24
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d109      	bne.n	8004400 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	3319      	adds	r3, #25
 80043fc:	2201      	movs	r2, #1
 80043fe:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	78fa      	ldrb	r2, [r7, #3]
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	f001 fc83 	bl	8005d14 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4413      	add	r3, r2
 8004416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800441a:	461a      	mov	r2, r3
 800441c:	2310      	movs	r3, #16
 800441e:	6093      	str	r3, [r2, #8]
 8004420:	e2a7      	b.n	8004972 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	4611      	mov	r1, r2
 800442a:	4618      	mov	r0, r3
 800442c:	f001 fbf5 	bl	8005c1a <USB_ReadChInterrupts>
 8004430:	4603      	mov	r3, r0
 8004432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004436:	2b80      	cmp	r3, #128	@ 0x80
 8004438:	f040 8083 	bne.w	8004542 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	799b      	ldrb	r3, [r3, #6]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d111      	bne.n	8004468 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	334d      	adds	r3, #77	@ 0x4d
 8004454:	2207      	movs	r2, #7
 8004456:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	78fa      	ldrb	r2, [r7, #3]
 800445e:	4611      	mov	r1, r2
 8004460:	4618      	mov	r0, r3
 8004462:	f001 fc57 	bl	8005d14 <USB_HC_Halt>
 8004466:	e062      	b.n	800452e <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004468:	78fa      	ldrb	r2, [r7, #3]
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	1a9b      	subs	r3, r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	3344      	adds	r3, #68	@ 0x44
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	1c59      	adds	r1, r3, #1
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4403      	add	r3, r0
 8004488:	3344      	adds	r3, #68	@ 0x44
 800448a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	1a9b      	subs	r3, r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	3344      	adds	r3, #68	@ 0x44
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d922      	bls.n	80044e8 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	3344      	adds	r3, #68	@ 0x44
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80044b6:	78fa      	ldrb	r2, [r7, #3]
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	334c      	adds	r3, #76	@ 0x4c
 80044c6:	2204      	movs	r2, #4
 80044c8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80044ca:	78fa      	ldrb	r2, [r7, #3]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	334c      	adds	r3, #76	@ 0x4c
 80044da:	781a      	ldrb	r2, [r3, #0]
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	4619      	mov	r1, r3
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f001 fe92 	bl	800620a <HAL_HCD_HC_NotifyURBChange_Callback>
 80044e6:	e022      	b.n	800452e <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044e8:	78fa      	ldrb	r2, [r7, #3]
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	4613      	mov	r3, r2
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	334c      	adds	r3, #76	@ 0x4c
 80044f8:	2202      	movs	r2, #2
 80044fa:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4413      	add	r3, r2
 8004504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004512:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800451a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4413      	add	r3, r2
 8004524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004528:	461a      	mov	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	4413      	add	r3, r2
 8004536:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800453a:	461a      	mov	r2, r3
 800453c:	2380      	movs	r3, #128	@ 0x80
 800453e:	6093      	str	r3, [r2, #8]
 8004540:	e217      	b.n	8004972 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f001 fb65 	bl	8005c1a <USB_ReadChInterrupts>
 8004550:	4603      	mov	r3, r0
 8004552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800455a:	d11b      	bne.n	8004594 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	334d      	adds	r3, #77	@ 0x4d
 800456c:	2209      	movs	r2, #9
 800456e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	4611      	mov	r1, r2
 8004578:	4618      	mov	r0, r3
 800457a:	f001 fbcb 	bl	8005d14 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800457e:	78fb      	ldrb	r3, [r7, #3]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4413      	add	r3, r2
 8004586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800458a:	461a      	mov	r2, r3
 800458c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004590:	6093      	str	r3, [r2, #8]
 8004592:	e1ee      	b.n	8004972 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	4611      	mov	r1, r2
 800459c:	4618      	mov	r0, r3
 800459e:	f001 fb3c 	bl	8005c1a <USB_ReadChInterrupts>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	f040 81df 	bne.w	800496c <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80045ae:	78fb      	ldrb	r3, [r7, #3]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045ba:	461a      	mov	r2, r3
 80045bc:	2302      	movs	r3, #2
 80045be:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	334d      	adds	r3, #77	@ 0x4d
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	f040 8093 	bne.w	80046fe <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045d8:	78fa      	ldrb	r2, [r7, #3]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	334d      	adds	r3, #77	@ 0x4d
 80045e8:	2202      	movs	r2, #2
 80045ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80045ec:	78fa      	ldrb	r2, [r7, #3]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	334c      	adds	r3, #76	@ 0x4c
 80045fc:	2201      	movs	r2, #1
 80045fe:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004600:	78fa      	ldrb	r2, [r7, #3]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	3326      	adds	r3, #38	@ 0x26
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d00b      	beq.n	800462e <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004616:	78fa      	ldrb	r2, [r7, #3]
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	1a9b      	subs	r3, r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	440b      	add	r3, r1
 8004624:	3326      	adds	r3, #38	@ 0x26
 8004626:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004628:	2b03      	cmp	r3, #3
 800462a:	f040 8190 	bne.w	800494e <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	799b      	ldrb	r3, [r3, #6]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d115      	bne.n	8004662 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	333d      	adds	r3, #61	@ 0x3d
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	78fa      	ldrb	r2, [r7, #3]
 800464a:	f083 0301 	eor.w	r3, r3, #1
 800464e:	b2d8      	uxtb	r0, r3
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	333d      	adds	r3, #61	@ 0x3d
 800465e:	4602      	mov	r2, r0
 8004660:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	799b      	ldrb	r3, [r3, #6]
 8004666:	2b01      	cmp	r3, #1
 8004668:	f040 8171 	bne.w	800494e <HCD_HC_OUT_IRQHandler+0x954>
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	3334      	adds	r3, #52	@ 0x34
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8165 	beq.w	800494e <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	3334      	adds	r3, #52	@ 0x34
 8004694:	6819      	ldr	r1, [r3, #0]
 8004696:	78fa      	ldrb	r2, [r7, #3]
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4403      	add	r3, r0
 80046a4:	3328      	adds	r3, #40	@ 0x28
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	440b      	add	r3, r1
 80046aa:	1e59      	subs	r1, r3, #1
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4403      	add	r3, r0
 80046ba:	3328      	adds	r3, #40	@ 0x28
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	fbb1 f3f3 	udiv	r3, r1, r3
 80046c2:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 813f 	beq.w	800494e <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80046d0:	78fa      	ldrb	r2, [r7, #3]
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	4613      	mov	r3, r2
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	333d      	adds	r3, #61	@ 0x3d
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	78fa      	ldrb	r2, [r7, #3]
 80046e4:	f083 0301 	eor.w	r3, r3, #1
 80046e8:	b2d8      	uxtb	r0, r3
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	333d      	adds	r3, #61	@ 0x3d
 80046f8:	4602      	mov	r2, r0
 80046fa:	701a      	strb	r2, [r3, #0]
 80046fc:	e127      	b.n	800494e <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80046fe:	78fa      	ldrb	r2, [r7, #3]
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	334d      	adds	r3, #77	@ 0x4d
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b03      	cmp	r3, #3
 8004712:	d120      	bne.n	8004756 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	334d      	adds	r3, #77	@ 0x4d
 8004724:	2202      	movs	r2, #2
 8004726:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	331b      	adds	r3, #27
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b01      	cmp	r3, #1
 800473c:	f040 8107 	bne.w	800494e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004740:	78fa      	ldrb	r2, [r7, #3]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	334c      	adds	r3, #76	@ 0x4c
 8004750:	2202      	movs	r2, #2
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	e0fb      	b.n	800494e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	1a9b      	subs	r3, r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	334d      	adds	r3, #77	@ 0x4d
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b04      	cmp	r3, #4
 800476a:	d13a      	bne.n	80047e2 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	334d      	adds	r3, #77	@ 0x4d
 800477c:	2202      	movs	r2, #2
 800477e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004780:	78fa      	ldrb	r2, [r7, #3]
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	334c      	adds	r3, #76	@ 0x4c
 8004790:	2202      	movs	r2, #2
 8004792:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004794:	78fa      	ldrb	r2, [r7, #3]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	331b      	adds	r3, #27
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	f040 80d1 	bne.w	800494e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80047ac:	78fa      	ldrb	r2, [r7, #3]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	1a9b      	subs	r3, r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	331b      	adds	r3, #27
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	0151      	lsls	r1, r2, #5
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	440a      	add	r2, r1
 80047d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047de:	6053      	str	r3, [r2, #4]
 80047e0:	e0b5      	b.n	800494e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80047e2:	78fa      	ldrb	r2, [r7, #3]
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	334d      	adds	r3, #77	@ 0x4d
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b05      	cmp	r3, #5
 80047f6:	d114      	bne.n	8004822 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047f8:	78fa      	ldrb	r2, [r7, #3]
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	334d      	adds	r3, #77	@ 0x4d
 8004808:	2202      	movs	r2, #2
 800480a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	334c      	adds	r3, #76	@ 0x4c
 800481c:	2202      	movs	r2, #2
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	e095      	b.n	800494e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004822:	78fa      	ldrb	r2, [r7, #3]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	334d      	adds	r3, #77	@ 0x4d
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b06      	cmp	r3, #6
 8004836:	d114      	bne.n	8004862 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004838:	78fa      	ldrb	r2, [r7, #3]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	334d      	adds	r3, #77	@ 0x4d
 8004848:	2202      	movs	r2, #2
 800484a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800484c:	78fa      	ldrb	r2, [r7, #3]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	334c      	adds	r3, #76	@ 0x4c
 800485c:	2205      	movs	r2, #5
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	e075      	b.n	800494e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004862:	78fa      	ldrb	r2, [r7, #3]
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	334d      	adds	r3, #77	@ 0x4d
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b07      	cmp	r3, #7
 8004876:	d00a      	beq.n	800488e <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004878:	78fa      	ldrb	r2, [r7, #3]
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	334d      	adds	r3, #77	@ 0x4d
 8004888:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800488a:	2b09      	cmp	r3, #9
 800488c:	d170      	bne.n	8004970 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800488e:	78fa      	ldrb	r2, [r7, #3]
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	1a9b      	subs	r3, r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	334d      	adds	r3, #77	@ 0x4d
 800489e:	2202      	movs	r2, #2
 80048a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80048a2:	78fa      	ldrb	r2, [r7, #3]
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	4613      	mov	r3, r2
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	1a9b      	subs	r3, r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	440b      	add	r3, r1
 80048b0:	3344      	adds	r3, #68	@ 0x44
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	1c59      	adds	r1, r3, #1
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4613      	mov	r3, r2
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4403      	add	r3, r0
 80048c2:	3344      	adds	r3, #68	@ 0x44
 80048c4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	3344      	adds	r3, #68	@ 0x44
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d914      	bls.n	8004906 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80048dc:	78fa      	ldrb	r2, [r7, #3]
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	4613      	mov	r3, r2
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	3344      	adds	r3, #68	@ 0x44
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80048f0:	78fa      	ldrb	r2, [r7, #3]
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	4613      	mov	r3, r2
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	334c      	adds	r3, #76	@ 0x4c
 8004900:	2204      	movs	r2, #4
 8004902:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004904:	e022      	b.n	800494c <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004906:	78fa      	ldrb	r2, [r7, #3]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	334c      	adds	r3, #76	@ 0x4c
 8004916:	2202      	movs	r2, #2
 8004918:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4413      	add	r3, r2
 8004922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004930:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004938:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	4413      	add	r3, r2
 8004942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004946:	461a      	mov	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800494c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	334c      	adds	r3, #76	@ 0x4c
 800495e:	781a      	ldrb	r2, [r3, #0]
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f001 fc50 	bl	800620a <HAL_HCD_HC_NotifyURBChange_Callback>
 800496a:	e002      	b.n	8004972 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800496c:	bf00      	nop
 800496e:	e000      	b.n	8004972 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004970:	bf00      	nop
  }
}
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08a      	sub	sp, #40	@ 0x28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004988:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	0c5b      	lsrs	r3, r3, #17
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049ac:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d004      	beq.n	80049be <HCD_RXQLVL_IRQHandler+0x46>
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2b05      	cmp	r3, #5
 80049b8:	f000 80b6 	beq.w	8004b28 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80049bc:	e0b7      	b.n	8004b2e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80b3 	beq.w	8004b2c <HCD_RXQLVL_IRQHandler+0x1b4>
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4613      	mov	r3, r2
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	332c      	adds	r3, #44	@ 0x2c
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80a7 	beq.w	8004b2c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4613      	mov	r3, r2
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	1a9b      	subs	r3, r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	3338      	adds	r3, #56	@ 0x38
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	18d1      	adds	r1, r2, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4613      	mov	r3, r2
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	1a9b      	subs	r3, r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4403      	add	r3, r0
 8004a02:	3334      	adds	r3, #52	@ 0x34
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4299      	cmp	r1, r3
 8004a08:	f200 8083 	bhi.w	8004b12 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6818      	ldr	r0, [r3, #0]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4613      	mov	r3, r2
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	332c      	adds	r3, #44	@ 0x2c
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	b292      	uxth	r2, r2
 8004a26:	4619      	mov	r1, r3
 8004a28:	f001 f88c 	bl	8005b44 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4613      	mov	r3, r2
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	332c      	adds	r3, #44	@ 0x2c
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	18d1      	adds	r1, r2, r3
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4613      	mov	r3, r2
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4403      	add	r3, r0
 8004a50:	332c      	adds	r3, #44	@ 0x2c
 8004a52:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	3338      	adds	r3, #56	@ 0x38
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	18d1      	adds	r1, r2, r3
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4403      	add	r3, r0
 8004a78:	3338      	adds	r3, #56	@ 0x38
 8004a7a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	0cdb      	lsrs	r3, r3, #19
 8004a8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a90:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	3328      	adds	r3, #40	@ 0x28
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d13f      	bne.n	8004b2c <HCD_RXQLVL_IRQHandler+0x1b4>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d03c      	beq.n	8004b2c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ac8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ad0:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ade:	461a      	mov	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	1a9b      	subs	r3, r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	333c      	adds	r3, #60	@ 0x3c
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	f083 0301 	eor.w	r3, r3, #1
 8004afa:	b2d8      	uxtb	r0, r3
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	4613      	mov	r3, r2
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	333c      	adds	r3, #60	@ 0x3c
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	701a      	strb	r2, [r3, #0]
      break;
 8004b10:	e00c      	b.n	8004b2c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	4613      	mov	r3, r2
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	1a9b      	subs	r3, r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	334c      	adds	r3, #76	@ 0x4c
 8004b22:	2204      	movs	r2, #4
 8004b24:	701a      	strb	r2, [r3, #0]
      break;
 8004b26:	e001      	b.n	8004b2c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004b28:	bf00      	nop
 8004b2a:	e000      	b.n	8004b2e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004b2c:	bf00      	nop
  }
}
 8004b2e:	bf00      	nop
 8004b30:	3728      	adds	r7, #40	@ 0x28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b086      	sub	sp, #24
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004b62:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d10b      	bne.n	8004b86 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d102      	bne.n	8004b7e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f001 fb2a 	bl	80061d2 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f043 0302 	orr.w	r3, r3, #2
 8004b84:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d132      	bne.n	8004bf6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f043 0308 	orr.w	r3, r3, #8
 8004b96:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d126      	bne.n	8004bf0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	7a5b      	ldrb	r3, [r3, #9]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d113      	bne.n	8004bd2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004bb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bb4:	d106      	bne.n	8004bc4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2102      	movs	r1, #2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 f85b 	bl	8005c78 <USB_InitFSLSPClkSel>
 8004bc2:	e011      	b.n	8004be8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2101      	movs	r1, #1
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f001 f854 	bl	8005c78 <USB_InitFSLSPClkSel>
 8004bd0:	e00a      	b.n	8004be8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	79db      	ldrb	r3, [r3, #7]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d106      	bne.n	8004be8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004be0:	461a      	mov	r2, r3
 8004be2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004be6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f001 fb1c 	bl	8006226 <HAL_HCD_PortEnabled_Callback>
 8004bee:	e002      	b.n	8004bf6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f001 fb26 	bl	8006242 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d103      	bne.n	8004c08 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f043 0320 	orr.w	r3, r3, #32
 8004c06:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	6013      	str	r3, [r2, #0]
}
 8004c14:	bf00      	nop
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e267      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d075      	beq.n	8004d26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c3a:	4b88      	ldr	r3, [pc, #544]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 030c 	and.w	r3, r3, #12
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d00c      	beq.n	8004c60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c46:	4b85      	ldr	r3, [pc, #532]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d112      	bne.n	8004c78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c52:	4b82      	ldr	r3, [pc, #520]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c5e:	d10b      	bne.n	8004c78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c60:	4b7e      	ldr	r3, [pc, #504]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d05b      	beq.n	8004d24 <HAL_RCC_OscConfig+0x108>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d157      	bne.n	8004d24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e242      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c80:	d106      	bne.n	8004c90 <HAL_RCC_OscConfig+0x74>
 8004c82:	4b76      	ldr	r3, [pc, #472]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a75      	ldr	r2, [pc, #468]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	e01d      	b.n	8004ccc <HAL_RCC_OscConfig+0xb0>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c98:	d10c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x98>
 8004c9a:	4b70      	ldr	r3, [pc, #448]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a6f      	ldr	r2, [pc, #444]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a6c      	ldr	r2, [pc, #432]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	e00b      	b.n	8004ccc <HAL_RCC_OscConfig+0xb0>
 8004cb4:	4b69      	ldr	r3, [pc, #420]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a68      	ldr	r2, [pc, #416]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004cba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	4b66      	ldr	r3, [pc, #408]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a65      	ldr	r2, [pc, #404]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004cc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d013      	beq.n	8004cfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd4:	f7fd ff04 	bl	8002ae0 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cdc:	f7fd ff00 	bl	8002ae0 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b64      	cmp	r3, #100	@ 0x64
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e207      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cee:	4b5b      	ldr	r3, [pc, #364]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0xc0>
 8004cfa:	e014      	b.n	8004d26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfc:	f7fd fef0 	bl	8002ae0 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fd feec 	bl	8002ae0 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	@ 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e1f3      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d16:	4b51      	ldr	r3, [pc, #324]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0xe8>
 8004d22:	e000      	b.n	8004d26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d063      	beq.n	8004dfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d32:	4b4a      	ldr	r3, [pc, #296]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00b      	beq.n	8004d56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d3e:	4b47      	ldr	r3, [pc, #284]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d11c      	bne.n	8004d84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d4a:	4b44      	ldr	r3, [pc, #272]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d116      	bne.n	8004d84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d56:	4b41      	ldr	r3, [pc, #260]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_RCC_OscConfig+0x152>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d001      	beq.n	8004d6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e1c7      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	4937      	ldr	r1, [pc, #220]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d82:	e03a      	b.n	8004dfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d020      	beq.n	8004dce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d8c:	4b34      	ldr	r3, [pc, #208]	@ (8004e60 <HAL_RCC_OscConfig+0x244>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d92:	f7fd fea5 	bl	8002ae0 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d9a:	f7fd fea1 	bl	8002ae0 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e1a8      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dac:	4b2b      	ldr	r3, [pc, #172]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db8:	4b28      	ldr	r3, [pc, #160]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	4925      	ldr	r1, [pc, #148]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	600b      	str	r3, [r1, #0]
 8004dcc:	e015      	b.n	8004dfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dce:	4b24      	ldr	r3, [pc, #144]	@ (8004e60 <HAL_RCC_OscConfig+0x244>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd4:	f7fd fe84 	bl	8002ae0 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ddc:	f7fd fe80 	bl	8002ae0 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e187      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dee:	4b1b      	ldr	r3, [pc, #108]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d036      	beq.n	8004e74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d016      	beq.n	8004e3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e0e:	4b15      	ldr	r3, [pc, #84]	@ (8004e64 <HAL_RCC_OscConfig+0x248>)
 8004e10:	2201      	movs	r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e14:	f7fd fe64 	bl	8002ae0 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e1c:	f7fd fe60 	bl	8002ae0 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e167      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0x200>
 8004e3a:	e01b      	b.n	8004e74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e3c:	4b09      	ldr	r3, [pc, #36]	@ (8004e64 <HAL_RCC_OscConfig+0x248>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e42:	f7fd fe4d 	bl	8002ae0 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e48:	e00e      	b.n	8004e68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e4a:	f7fd fe49 	bl	8002ae0 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d907      	bls.n	8004e68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e150      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	42470000 	.word	0x42470000
 8004e64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e68:	4b88      	ldr	r3, [pc, #544]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ea      	bne.n	8004e4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 8097 	beq.w	8004fb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e82:	2300      	movs	r3, #0
 8004e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e86:	4b81      	ldr	r3, [pc, #516]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10f      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e92:	2300      	movs	r3, #0
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	4b7d      	ldr	r3, [pc, #500]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9a:	4a7c      	ldr	r2, [pc, #496]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ea2:	4b7a      	ldr	r3, [pc, #488]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eaa:	60bb      	str	r3, [r7, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb2:	4b77      	ldr	r3, [pc, #476]	@ (8005090 <HAL_RCC_OscConfig+0x474>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d118      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ebe:	4b74      	ldr	r3, [pc, #464]	@ (8005090 <HAL_RCC_OscConfig+0x474>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a73      	ldr	r2, [pc, #460]	@ (8005090 <HAL_RCC_OscConfig+0x474>)
 8004ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eca:	f7fd fe09 	bl	8002ae0 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed2:	f7fd fe05 	bl	8002ae0 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e10c      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee4:	4b6a      	ldr	r3, [pc, #424]	@ (8005090 <HAL_RCC_OscConfig+0x474>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0f0      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCC_OscConfig+0x2ea>
 8004ef8:	4b64      	ldr	r3, [pc, #400]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efc:	4a63      	ldr	r2, [pc, #396]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f04:	e01c      	b.n	8004f40 <HAL_RCC_OscConfig+0x324>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b05      	cmp	r3, #5
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x30c>
 8004f0e:	4b5f      	ldr	r3, [pc, #380]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f12:	4a5e      	ldr	r2, [pc, #376]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004f14:	f043 0304 	orr.w	r3, r3, #4
 8004f18:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f1a:	4b5c      	ldr	r3, [pc, #368]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1e:	4a5b      	ldr	r2, [pc, #364]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f26:	e00b      	b.n	8004f40 <HAL_RCC_OscConfig+0x324>
 8004f28:	4b58      	ldr	r3, [pc, #352]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2c:	4a57      	ldr	r2, [pc, #348]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004f2e:	f023 0301 	bic.w	r3, r3, #1
 8004f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f34:	4b55      	ldr	r3, [pc, #340]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f38:	4a54      	ldr	r2, [pc, #336]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004f3a:	f023 0304 	bic.w	r3, r3, #4
 8004f3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d015      	beq.n	8004f74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f48:	f7fd fdca 	bl	8002ae0 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4e:	e00a      	b.n	8004f66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f50:	f7fd fdc6 	bl	8002ae0 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e0cb      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f66:	4b49      	ldr	r3, [pc, #292]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0ee      	beq.n	8004f50 <HAL_RCC_OscConfig+0x334>
 8004f72:	e014      	b.n	8004f9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f74:	f7fd fdb4 	bl	8002ae0 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7a:	e00a      	b.n	8004f92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f7c:	f7fd fdb0 	bl	8002ae0 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e0b5      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f92:	4b3e      	ldr	r3, [pc, #248]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1ee      	bne.n	8004f7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f9e:	7dfb      	ldrb	r3, [r7, #23]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d105      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa4:	4b39      	ldr	r3, [pc, #228]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa8:	4a38      	ldr	r2, [pc, #224]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004faa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80a1 	beq.w	80050fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fba:	4b34      	ldr	r3, [pc, #208]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d05c      	beq.n	8005080 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d141      	bne.n	8005052 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fce:	4b31      	ldr	r3, [pc, #196]	@ (8005094 <HAL_RCC_OscConfig+0x478>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd4:	f7fd fd84 	bl	8002ae0 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fdc:	f7fd fd80 	bl	8002ae0 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e087      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fee:	4b27      	ldr	r3, [pc, #156]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69da      	ldr	r2, [r3, #28]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005008:	019b      	lsls	r3, r3, #6
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005010:	085b      	lsrs	r3, r3, #1
 8005012:	3b01      	subs	r3, #1
 8005014:	041b      	lsls	r3, r3, #16
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	061b      	lsls	r3, r3, #24
 800501e:	491b      	ldr	r1, [pc, #108]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8005020:	4313      	orrs	r3, r2
 8005022:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005024:	4b1b      	ldr	r3, [pc, #108]	@ (8005094 <HAL_RCC_OscConfig+0x478>)
 8005026:	2201      	movs	r2, #1
 8005028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502a:	f7fd fd59 	bl	8002ae0 <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005032:	f7fd fd55 	bl	8002ae0 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e05c      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005044:	4b11      	ldr	r3, [pc, #68]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0f0      	beq.n	8005032 <HAL_RCC_OscConfig+0x416>
 8005050:	e054      	b.n	80050fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005052:	4b10      	ldr	r3, [pc, #64]	@ (8005094 <HAL_RCC_OscConfig+0x478>)
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005058:	f7fd fd42 	bl	8002ae0 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005060:	f7fd fd3e 	bl	8002ae0 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e045      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005072:	4b06      	ldr	r3, [pc, #24]	@ (800508c <HAL_RCC_OscConfig+0x470>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f0      	bne.n	8005060 <HAL_RCC_OscConfig+0x444>
 800507e:	e03d      	b.n	80050fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d107      	bne.n	8005098 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e038      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
 800508c:	40023800 	.word	0x40023800
 8005090:	40007000 	.word	0x40007000
 8005094:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005098:	4b1b      	ldr	r3, [pc, #108]	@ (8005108 <HAL_RCC_OscConfig+0x4ec>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d028      	beq.n	80050f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d121      	bne.n	80050f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050be:	429a      	cmp	r2, r3
 80050c0:	d11a      	bne.n	80050f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050c8:	4013      	ands	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d111      	bne.n	80050f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	3b01      	subs	r3, #1
 80050e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d107      	bne.n	80050f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d001      	beq.n	80050fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40023800 	.word	0x40023800

0800510c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0cc      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005120:	4b68      	ldr	r3, [pc, #416]	@ (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d90c      	bls.n	8005148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512e:	4b65      	ldr	r3, [pc, #404]	@ (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005136:	4b63      	ldr	r3, [pc, #396]	@ (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d001      	beq.n	8005148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e0b8      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d020      	beq.n	8005196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005160:	4b59      	ldr	r3, [pc, #356]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4a58      	ldr	r2, [pc, #352]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800516a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005178:	4b53      	ldr	r3, [pc, #332]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	4a52      	ldr	r2, [pc, #328]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005184:	4b50      	ldr	r3, [pc, #320]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	494d      	ldr	r1, [pc, #308]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005192:	4313      	orrs	r3, r2
 8005194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d044      	beq.n	800522c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d107      	bne.n	80051ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051aa:	4b47      	ldr	r3, [pc, #284]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d119      	bne.n	80051ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e07f      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d003      	beq.n	80051ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d107      	bne.n	80051da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ca:	4b3f      	ldr	r3, [pc, #252]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d109      	bne.n	80051ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e06f      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051da:	4b3b      	ldr	r3, [pc, #236]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e067      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ea:	4b37      	ldr	r3, [pc, #220]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f023 0203 	bic.w	r2, r3, #3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	4934      	ldr	r1, [pc, #208]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051fc:	f7fd fc70 	bl	8002ae0 <HAL_GetTick>
 8005200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005202:	e00a      	b.n	800521a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005204:	f7fd fc6c 	bl	8002ae0 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e04f      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521a:	4b2b      	ldr	r3, [pc, #172]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 020c 	and.w	r2, r3, #12
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	429a      	cmp	r2, r3
 800522a:	d1eb      	bne.n	8005204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800522c:	4b25      	ldr	r3, [pc, #148]	@ (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d20c      	bcs.n	8005254 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523a:	4b22      	ldr	r3, [pc, #136]	@ (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005242:	4b20      	ldr	r3, [pc, #128]	@ (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d001      	beq.n	8005254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e032      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005260:	4b19      	ldr	r3, [pc, #100]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4916      	ldr	r1, [pc, #88]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	4313      	orrs	r3, r2
 8005270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800527e:	4b12      	ldr	r3, [pc, #72]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	490e      	ldr	r1, [pc, #56]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800528e:	4313      	orrs	r3, r2
 8005290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005292:	f000 f821 	bl	80052d8 <HAL_RCC_GetSysClockFreq>
 8005296:	4602      	mov	r2, r0
 8005298:	4b0b      	ldr	r3, [pc, #44]	@ (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	490a      	ldr	r1, [pc, #40]	@ (80052cc <HAL_RCC_ClockConfig+0x1c0>)
 80052a4:	5ccb      	ldrb	r3, [r1, r3]
 80052a6:	fa22 f303 	lsr.w	r3, r2, r3
 80052aa:	4a09      	ldr	r2, [pc, #36]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 80052ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80052ae:	4b09      	ldr	r3, [pc, #36]	@ (80052d4 <HAL_RCC_ClockConfig+0x1c8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fd fbd0 	bl	8002a58 <HAL_InitTick>

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40023c00 	.word	0x40023c00
 80052c8:	40023800 	.word	0x40023800
 80052cc:	0800635c 	.word	0x0800635c
 80052d0:	2000005c 	.word	0x2000005c
 80052d4:	20000060 	.word	0x20000060

080052d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052dc:	b094      	sub	sp, #80	@ 0x50
 80052de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052f0:	4b79      	ldr	r3, [pc, #484]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 030c 	and.w	r3, r3, #12
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d00d      	beq.n	8005318 <HAL_RCC_GetSysClockFreq+0x40>
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	f200 80e1 	bhi.w	80054c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0x34>
 8005306:	2b04      	cmp	r3, #4
 8005308:	d003      	beq.n	8005312 <HAL_RCC_GetSysClockFreq+0x3a>
 800530a:	e0db      	b.n	80054c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800530c:	4b73      	ldr	r3, [pc, #460]	@ (80054dc <HAL_RCC_GetSysClockFreq+0x204>)
 800530e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005310:	e0db      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005312:	4b73      	ldr	r3, [pc, #460]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005314:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005316:	e0d8      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005318:	4b6f      	ldr	r3, [pc, #444]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005320:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005322:	4b6d      	ldr	r3, [pc, #436]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d063      	beq.n	80053f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800532e:	4b6a      	ldr	r3, [pc, #424]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	099b      	lsrs	r3, r3, #6
 8005334:	2200      	movs	r2, #0
 8005336:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005338:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800533a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005340:	633b      	str	r3, [r7, #48]	@ 0x30
 8005342:	2300      	movs	r3, #0
 8005344:	637b      	str	r3, [r7, #52]	@ 0x34
 8005346:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800534a:	4622      	mov	r2, r4
 800534c:	462b      	mov	r3, r5
 800534e:	f04f 0000 	mov.w	r0, #0
 8005352:	f04f 0100 	mov.w	r1, #0
 8005356:	0159      	lsls	r1, r3, #5
 8005358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800535c:	0150      	lsls	r0, r2, #5
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4621      	mov	r1, r4
 8005364:	1a51      	subs	r1, r2, r1
 8005366:	6139      	str	r1, [r7, #16]
 8005368:	4629      	mov	r1, r5
 800536a:	eb63 0301 	sbc.w	r3, r3, r1
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800537c:	4659      	mov	r1, fp
 800537e:	018b      	lsls	r3, r1, #6
 8005380:	4651      	mov	r1, sl
 8005382:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005386:	4651      	mov	r1, sl
 8005388:	018a      	lsls	r2, r1, #6
 800538a:	4651      	mov	r1, sl
 800538c:	ebb2 0801 	subs.w	r8, r2, r1
 8005390:	4659      	mov	r1, fp
 8005392:	eb63 0901 	sbc.w	r9, r3, r1
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053aa:	4690      	mov	r8, r2
 80053ac:	4699      	mov	r9, r3
 80053ae:	4623      	mov	r3, r4
 80053b0:	eb18 0303 	adds.w	r3, r8, r3
 80053b4:	60bb      	str	r3, [r7, #8]
 80053b6:	462b      	mov	r3, r5
 80053b8:	eb49 0303 	adc.w	r3, r9, r3
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053ca:	4629      	mov	r1, r5
 80053cc:	024b      	lsls	r3, r1, #9
 80053ce:	4621      	mov	r1, r4
 80053d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053d4:	4621      	mov	r1, r4
 80053d6:	024a      	lsls	r2, r1, #9
 80053d8:	4610      	mov	r0, r2
 80053da:	4619      	mov	r1, r3
 80053dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053de:	2200      	movs	r2, #0
 80053e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053e8:	f7fa feee 	bl	80001c8 <__aeabi_uldivmod>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4613      	mov	r3, r2
 80053f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053f4:	e058      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f6:	4b38      	ldr	r3, [pc, #224]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	099b      	lsrs	r3, r3, #6
 80053fc:	2200      	movs	r2, #0
 80053fe:	4618      	mov	r0, r3
 8005400:	4611      	mov	r1, r2
 8005402:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005406:	623b      	str	r3, [r7, #32]
 8005408:	2300      	movs	r3, #0
 800540a:	627b      	str	r3, [r7, #36]	@ 0x24
 800540c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005410:	4642      	mov	r2, r8
 8005412:	464b      	mov	r3, r9
 8005414:	f04f 0000 	mov.w	r0, #0
 8005418:	f04f 0100 	mov.w	r1, #0
 800541c:	0159      	lsls	r1, r3, #5
 800541e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005422:	0150      	lsls	r0, r2, #5
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4641      	mov	r1, r8
 800542a:	ebb2 0a01 	subs.w	sl, r2, r1
 800542e:	4649      	mov	r1, r9
 8005430:	eb63 0b01 	sbc.w	fp, r3, r1
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	f04f 0300 	mov.w	r3, #0
 800543c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005440:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005444:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005448:	ebb2 040a 	subs.w	r4, r2, sl
 800544c:	eb63 050b 	sbc.w	r5, r3, fp
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	00eb      	lsls	r3, r5, #3
 800545a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800545e:	00e2      	lsls	r2, r4, #3
 8005460:	4614      	mov	r4, r2
 8005462:	461d      	mov	r5, r3
 8005464:	4643      	mov	r3, r8
 8005466:	18e3      	adds	r3, r4, r3
 8005468:	603b      	str	r3, [r7, #0]
 800546a:	464b      	mov	r3, r9
 800546c:	eb45 0303 	adc.w	r3, r5, r3
 8005470:	607b      	str	r3, [r7, #4]
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800547e:	4629      	mov	r1, r5
 8005480:	028b      	lsls	r3, r1, #10
 8005482:	4621      	mov	r1, r4
 8005484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005488:	4621      	mov	r1, r4
 800548a:	028a      	lsls	r2, r1, #10
 800548c:	4610      	mov	r0, r2
 800548e:	4619      	mov	r1, r3
 8005490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005492:	2200      	movs	r2, #0
 8005494:	61bb      	str	r3, [r7, #24]
 8005496:	61fa      	str	r2, [r7, #28]
 8005498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800549c:	f7fa fe94 	bl	80001c8 <__aeabi_uldivmod>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4613      	mov	r3, r2
 80054a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80054a8:	4b0b      	ldr	r3, [pc, #44]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	0c1b      	lsrs	r3, r3, #16
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	3301      	adds	r3, #1
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80054b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054c2:	e002      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054c4:	4b05      	ldr	r3, [pc, #20]	@ (80054dc <HAL_RCC_GetSysClockFreq+0x204>)
 80054c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3750      	adds	r7, #80	@ 0x50
 80054d0:	46bd      	mov	sp, r7
 80054d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d6:	bf00      	nop
 80054d8:	40023800 	.word	0x40023800
 80054dc:	00f42400 	.word	0x00f42400
 80054e0:	007a1200 	.word	0x007a1200

080054e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e041      	b.n	800557a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fc ffea 	bl	80024e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3304      	adds	r3, #4
 8005520:	4619      	mov	r1, r3
 8005522:	4610      	mov	r0, r2
 8005524:	f000 f950 	bl	80057c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d020      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d01b      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f06f 0202 	mvn.w	r2, #2
 80055b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f003 0303 	and.w	r3, r3, #3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f8dc 	bl	800578a <HAL_TIM_IC_CaptureCallback>
 80055d2:	e005      	b.n	80055e0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f8ce 	bl	8005776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f8df 	bl	800579e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d020      	beq.n	8005632 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d01b      	beq.n	8005632 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f06f 0204 	mvn.w	r2, #4
 8005602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f8b6 	bl	800578a <HAL_TIM_IC_CaptureCallback>
 800561e:	e005      	b.n	800562c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f8a8 	bl	8005776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8b9 	bl	800579e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d020      	beq.n	800567e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d01b      	beq.n	800567e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f06f 0208 	mvn.w	r2, #8
 800564e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2204      	movs	r2, #4
 8005654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f003 0303 	and.w	r3, r3, #3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f890 	bl	800578a <HAL_TIM_IC_CaptureCallback>
 800566a:	e005      	b.n	8005678 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f882 	bl	8005776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f893 	bl	800579e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	d020      	beq.n	80056ca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01b      	beq.n	80056ca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f06f 0210 	mvn.w	r2, #16
 800569a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2208      	movs	r2, #8
 80056a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f86a 	bl	800578a <HAL_TIM_IC_CaptureCallback>
 80056b6:	e005      	b.n	80056c4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f85c 	bl	8005776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f86d 	bl	800579e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00c      	beq.n	80056ee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f06f 0201 	mvn.w	r2, #1
 80056e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f83a 	bl	8005762 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00c      	beq.n	8005712 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d007      	beq.n	8005712 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800570a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f98d 	bl	8005a2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00c      	beq.n	8005736 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800572e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f83e 	bl	80057b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00c      	beq.n	800575a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d007      	beq.n	800575a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f06f 0220 	mvn.w	r2, #32
 8005752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f95f 	bl	8005a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a46      	ldr	r2, [pc, #280]	@ (80058f4 <TIM_Base_SetConfig+0x12c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d013      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e6:	d00f      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a43      	ldr	r2, [pc, #268]	@ (80058f8 <TIM_Base_SetConfig+0x130>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00b      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a42      	ldr	r2, [pc, #264]	@ (80058fc <TIM_Base_SetConfig+0x134>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d007      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a41      	ldr	r2, [pc, #260]	@ (8005900 <TIM_Base_SetConfig+0x138>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a40      	ldr	r2, [pc, #256]	@ (8005904 <TIM_Base_SetConfig+0x13c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d108      	bne.n	800581a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a35      	ldr	r2, [pc, #212]	@ (80058f4 <TIM_Base_SetConfig+0x12c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d02b      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005828:	d027      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a32      	ldr	r2, [pc, #200]	@ (80058f8 <TIM_Base_SetConfig+0x130>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d023      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a31      	ldr	r2, [pc, #196]	@ (80058fc <TIM_Base_SetConfig+0x134>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d01f      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a30      	ldr	r2, [pc, #192]	@ (8005900 <TIM_Base_SetConfig+0x138>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d01b      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a2f      	ldr	r2, [pc, #188]	@ (8005904 <TIM_Base_SetConfig+0x13c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d017      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a2e      	ldr	r2, [pc, #184]	@ (8005908 <TIM_Base_SetConfig+0x140>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d013      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a2d      	ldr	r2, [pc, #180]	@ (800590c <TIM_Base_SetConfig+0x144>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00f      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2c      	ldr	r2, [pc, #176]	@ (8005910 <TIM_Base_SetConfig+0x148>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00b      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a2b      	ldr	r2, [pc, #172]	@ (8005914 <TIM_Base_SetConfig+0x14c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d007      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2a      	ldr	r2, [pc, #168]	@ (8005918 <TIM_Base_SetConfig+0x150>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d003      	beq.n	800587a <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a29      	ldr	r2, [pc, #164]	@ (800591c <TIM_Base_SetConfig+0x154>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d108      	bne.n	800588c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a10      	ldr	r2, [pc, #64]	@ (80058f4 <TIM_Base_SetConfig+0x12c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d003      	beq.n	80058c0 <TIM_Base_SetConfig+0xf8>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a12      	ldr	r2, [pc, #72]	@ (8005904 <TIM_Base_SetConfig+0x13c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d103      	bne.n	80058c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d105      	bne.n	80058e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f023 0201 	bic.w	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	611a      	str	r2, [r3, #16]
  }
}
 80058e6:	bf00      	nop
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	40010000 	.word	0x40010000
 80058f8:	40000400 	.word	0x40000400
 80058fc:	40000800 	.word	0x40000800
 8005900:	40000c00 	.word	0x40000c00
 8005904:	40010400 	.word	0x40010400
 8005908:	40014000 	.word	0x40014000
 800590c:	40014400 	.word	0x40014400
 8005910:	40014800 	.word	0x40014800
 8005914:	40001800 	.word	0x40001800
 8005918:	40001c00 	.word	0x40001c00
 800591c:	40002000 	.word	0x40002000

08005920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005934:	2302      	movs	r3, #2
 8005936:	e05a      	b.n	80059ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800595e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a21      	ldr	r2, [pc, #132]	@ (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d022      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005984:	d01d      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a1d      	ldr	r2, [pc, #116]	@ (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d018      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1b      	ldr	r2, [pc, #108]	@ (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1a      	ldr	r2, [pc, #104]	@ (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00e      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a18      	ldr	r2, [pc, #96]	@ (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d009      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a17      	ldr	r2, [pc, #92]	@ (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a15      	ldr	r2, [pc, #84]	@ (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d10c      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40010000 	.word	0x40010000
 8005a00:	40000400 	.word	0x40000400
 8005a04:	40000800 	.word	0x40000800
 8005a08:	40000c00 	.word	0x40000c00
 8005a0c:	40010400 	.word	0x40010400
 8005a10:	40014000 	.word	0x40014000
 8005a14:	40001800 	.word	0x40001800

08005a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f043 0201 	orr.w	r2, r3, #1
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f023 0201 	bic.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	3301      	adds	r3, #1
 8005a96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a9e:	d901      	bls.n	8005aa4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e01b      	b.n	8005adc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	daf2      	bge.n	8005a92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	019b      	lsls	r3, r3, #6
 8005ab4:	f043 0220 	orr.w	r2, r3, #32
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ac8:	d901      	bls.n	8005ace <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e006      	b.n	8005adc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	d0f0      	beq.n	8005abc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	3301      	adds	r3, #1
 8005af8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b00:	d901      	bls.n	8005b06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e018      	b.n	8005b38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	daf2      	bge.n	8005af4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2210      	movs	r2, #16
 8005b16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b24:	d901      	bls.n	8005b2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e006      	b.n	8005b38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f003 0310 	and.w	r3, r3, #16
 8005b32:	2b10      	cmp	r3, #16
 8005b34:	d0f0      	beq.n	8005b18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b08b      	sub	sp, #44	@ 0x2c
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b5a:	88fb      	ldrh	r3, [r7, #6]
 8005b5c:	089b      	lsrs	r3, r3, #2
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	623b      	str	r3, [r7, #32]
 8005b6e:	e014      	b.n	8005b9a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7e:	3301      	adds	r3, #1
 8005b80:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b84:	3301      	adds	r3, #1
 8005b86:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	3301      	adds	r3, #1
 8005b92:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	3301      	adds	r3, #1
 8005b98:	623b      	str	r3, [r7, #32]
 8005b9a:	6a3a      	ldr	r2, [r7, #32]
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d3e6      	bcc.n	8005b70 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ba2:	8bfb      	ldrh	r3, [r7, #30]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01e      	beq.n	8005be6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f107 0310 	add.w	r3, r7, #16
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	701a      	strb	r2, [r3, #0]
      i++;
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005bda:	8bfb      	ldrh	r3, [r7, #30]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005be0:	8bfb      	ldrh	r3, [r7, #30]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1ea      	bne.n	8005bbc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	372c      	adds	r7, #44	@ 0x2c
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b085      	sub	sp, #20
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	460b      	mov	r3, r1
 8005c24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005c3a:	78fb      	ldrb	r3, [r7, #3]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	f003 0301 	and.w	r3, r3, #1
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c96:	f023 0303 	bic.w	r3, r3, #3
 8005c9a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	68f9      	ldr	r1, [r7, #12]
 8005cac:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005cb4:	78fb      	ldrb	r3, [r7, #3]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d107      	bne.n	8005cca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005cc6:	6053      	str	r3, [r2, #4]
 8005cc8:	e00c      	b.n	8005ce4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d107      	bne.n	8005ce0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005cdc:	6053      	str	r3, [r2, #4]
 8005cde:	e001      	b.n	8005ce4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	b29b      	uxth	r3, r3
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b089      	sub	sp, #36	@ 0x24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	0c9b      	lsrs	r3, r3, #18
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	0fdb      	lsrs	r3, r3, #31
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	0fdb      	lsrs	r3, r3, #31
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d10d      	bne.n	8005d96 <USB_HC_Halt+0x82>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10a      	bne.n	8005d96 <USB_HC_Halt+0x82>
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d002      	beq.n	8005d92 <USB_HC_Halt+0x7e>
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d101      	bne.n	8005d96 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	e0d8      	b.n	8005f48 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <USB_HC_Halt+0x8e>
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d173      	bne.n	8005e8a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	0151      	lsls	r1, r2, #5
 8005db4:	69fa      	ldr	r2, [r7, #28]
 8005db6:	440a      	add	r2, r1
 8005db8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dc0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d14a      	bne.n	8005e64 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d133      	bne.n	8005e42 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	0151      	lsls	r1, r2, #5
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	440a      	add	r2, r1
 8005df0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005df4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005df8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e18:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e26:	d82e      	bhi.n	8005e86 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e3e:	d0ec      	beq.n	8005e1a <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e40:	e081      	b.n	8005f46 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e60:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e62:	e070      	b.n	8005f46 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e82:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e84:	e05f      	b.n	8005f46 <USB_HC_Halt+0x232>
            break;
 8005e86:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e88:	e05d      	b.n	8005f46 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ea4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ea8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d133      	bne.n	8005f22 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	0151      	lsls	r1, r2, #5
 8005ecc:	69fa      	ldr	r2, [r7, #28]
 8005ece:	440a      	add	r2, r1
 8005ed0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ed4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ed8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	0151      	lsls	r1, r2, #5
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	440a      	add	r2, r1
 8005ef0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ef4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ef8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	3301      	adds	r3, #1
 8005efe:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f06:	d81d      	bhi.n	8005f44 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f1e:	d0ec      	beq.n	8005efa <USB_HC_Halt+0x1e6>
 8005f20:	e011      	b.n	8005f46 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	0151      	lsls	r1, r2, #5
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	440a      	add	r2, r1
 8005f38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	e000      	b.n	8005f46 <USB_HC_Halt+0x232>
          break;
 8005f44:	bf00      	nop
    }
  }

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3724      	adds	r7, #36	@ 0x24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff fd7a 	bl	8005a62 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f6e:	2110      	movs	r1, #16
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff fd87 	bl	8005a84 <USB_FlushTxFifo>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7ff fdb1 	bl	8005ae8 <USB_FlushRxFifo>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005f90:	2300      	movs	r3, #0
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	e01f      	b.n	8005fd6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fb4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005fbc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fca:	461a      	mov	r2, r3
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b0f      	cmp	r3, #15
 8005fda:	d9dc      	bls.n	8005f96 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61bb      	str	r3, [r7, #24]
 8005fe0:	e034      	b.n	800604c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ff8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006000:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006008:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	4413      	add	r3, r2
 8006012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006016:	461a      	mov	r2, r3
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006028:	d80c      	bhi.n	8006044 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	4413      	add	r3, r2
 8006032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800603c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006040:	d0ec      	beq.n	800601c <USB_StopHost+0xc8>
 8006042:	e000      	b.n	8006046 <USB_StopHost+0xf2>
        break;
 8006044:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	3301      	adds	r3, #1
 800604a:	61bb      	str	r3, [r7, #24]
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	2b0f      	cmp	r3, #15
 8006050:	d9c7      	bls.n	8005fe2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006058:	461a      	mov	r2, r3
 800605a:	f04f 33ff 	mov.w	r3, #4294967295
 800605e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f04f 32ff 	mov.w	r2, #4294967295
 8006066:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7ff fce9 	bl	8005a40 <USB_EnableGlobalInt>

  return ret;
 800606e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f804 	bl	800609c <USBH_HandleSof>
}
 8006094:	bf00      	nop
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b0b      	cmp	r3, #11
 80060ac:	d10a      	bne.n	80060c4 <USBH_HandleSof+0x28>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d005      	beq.n	80060c4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	4798      	blx	r3
  }
}
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80060dc:	bf00      	nop
}
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80060f8:	bf00      	nop
}
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f883 	bl	800625e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	791b      	ldrb	r3, [r3, #4]
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f80b 	bl	800617a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	795b      	ldrb	r3, [r3, #5]
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f805 	bl	800617a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	460b      	mov	r3, r1
 8006184:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	2b0f      	cmp	r3, #15
 800618a:	d80d      	bhi.n	80061a8 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	33e0      	adds	r3, #224	@ 0xe0
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	33e0      	adds	r3, #224	@ 0xe0
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff ff57 	bl	8006078 <USBH_LL_IncTimer>
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff ff8f 	bl	8006104 <USBH_LL_Connect>
}
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7ff ff98 	bl	8006132 <USBH_LL_Disconnect>
}
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	460b      	mov	r3, r1
 8006214:	70fb      	strb	r3, [r7, #3]
 8006216:	4613      	mov	r3, r2
 8006218:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b082      	sub	sp, #8
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff ff49 	bl	80060cc <USBH_LL_PortEnabled>
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff ff49 	bl	80060e8 <USBH_LL_PortDisabled>
}
 8006256:	bf00      	nop
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006274:	4618      	mov	r0, r3
 8006276:	f7fd f83a 	bl	80032ee <HAL_HCD_Stop>
 800627a:	4603      	mov	r3, r0
 800627c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	4618      	mov	r0, r3
 8006282:	f000 f807 	bl	8006294 <USBH_Get_USB_Status>
 8006286:	4603      	mov	r3, r0
 8006288:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800628a:	7bbb      	ldrb	r3, [r7, #14]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	4603      	mov	r3, r0
 800629c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80062a2:	79fb      	ldrb	r3, [r7, #7]
 80062a4:	2b03      	cmp	r3, #3
 80062a6:	d817      	bhi.n	80062d8 <USBH_Get_USB_Status+0x44>
 80062a8:	a201      	add	r2, pc, #4	@ (adr r2, 80062b0 <USBH_Get_USB_Status+0x1c>)
 80062aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ae:	bf00      	nop
 80062b0:	080062c1 	.word	0x080062c1
 80062b4:	080062c7 	.word	0x080062c7
 80062b8:	080062cd 	.word	0x080062cd
 80062bc:	080062d3 	.word	0x080062d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	73fb      	strb	r3, [r7, #15]
    break;
 80062c4:	e00b      	b.n	80062de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80062c6:	2302      	movs	r3, #2
 80062c8:	73fb      	strb	r3, [r7, #15]
    break;
 80062ca:	e008      	b.n	80062de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80062cc:	2301      	movs	r3, #1
 80062ce:	73fb      	strb	r3, [r7, #15]
    break;
 80062d0:	e005      	b.n	80062de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80062d2:	2302      	movs	r3, #2
 80062d4:	73fb      	strb	r3, [r7, #15]
    break;
 80062d6:	e002      	b.n	80062de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80062d8:	2302      	movs	r3, #2
 80062da:	73fb      	strb	r3, [r7, #15]
    break;
 80062dc:	bf00      	nop
  }
  return usb_status;
 80062de:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <memset>:
 80062ec:	4402      	add	r2, r0
 80062ee:	4603      	mov	r3, r0
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d100      	bne.n	80062f6 <memset+0xa>
 80062f4:	4770      	bx	lr
 80062f6:	f803 1b01 	strb.w	r1, [r3], #1
 80062fa:	e7f9      	b.n	80062f0 <memset+0x4>

080062fc <__libc_init_array>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006334 <__libc_init_array+0x38>)
 8006300:	4c0d      	ldr	r4, [pc, #52]	@ (8006338 <__libc_init_array+0x3c>)
 8006302:	1b64      	subs	r4, r4, r5
 8006304:	10a4      	asrs	r4, r4, #2
 8006306:	2600      	movs	r6, #0
 8006308:	42a6      	cmp	r6, r4
 800630a:	d109      	bne.n	8006320 <__libc_init_array+0x24>
 800630c:	4d0b      	ldr	r5, [pc, #44]	@ (800633c <__libc_init_array+0x40>)
 800630e:	4c0c      	ldr	r4, [pc, #48]	@ (8006340 <__libc_init_array+0x44>)
 8006310:	f000 f818 	bl	8006344 <_init>
 8006314:	1b64      	subs	r4, r4, r5
 8006316:	10a4      	asrs	r4, r4, #2
 8006318:	2600      	movs	r6, #0
 800631a:	42a6      	cmp	r6, r4
 800631c:	d105      	bne.n	800632a <__libc_init_array+0x2e>
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	f855 3b04 	ldr.w	r3, [r5], #4
 8006324:	4798      	blx	r3
 8006326:	3601      	adds	r6, #1
 8006328:	e7ee      	b.n	8006308 <__libc_init_array+0xc>
 800632a:	f855 3b04 	ldr.w	r3, [r5], #4
 800632e:	4798      	blx	r3
 8006330:	3601      	adds	r6, #1
 8006332:	e7f2      	b.n	800631a <__libc_init_array+0x1e>
 8006334:	08006374 	.word	0x08006374
 8006338:	08006374 	.word	0x08006374
 800633c:	08006374 	.word	0x08006374
 8006340:	08006378 	.word	0x08006378

08006344 <_init>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	bf00      	nop
 8006348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634a:	bc08      	pop	{r3}
 800634c:	469e      	mov	lr, r3
 800634e:	4770      	bx	lr

08006350 <_fini>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	bf00      	nop
 8006354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006356:	bc08      	pop	{r3}
 8006358:	469e      	mov	lr, r3
 800635a:	4770      	bx	lr
